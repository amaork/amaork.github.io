[{"title":"SQLite 常用操作","date":"2018-05-25T14:45:21.000Z","path":"2018/05/25/SQLite 常用操作/","text":"一、SQLite 数据类型SQLite 支持 5 种数据类型，如下： 存储类型 描述 NULL 值是一个 NULL 值。 INTEGER 值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。 REAL 值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。 TEXT 值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。 BLOB 值是一个 blob 数据，完全根据它的输入存储。 前几种都是常见的数据类型，BLOB 可以存储自定义数据，比如图像数据、列表、时间对象等等。 二、SQLite 数据表操作1、创建表SQLite 创建表的语法为： 1234567CREATE TABLE TABLE_NAME( column1 datatype [PRIMARY KEY] [NOT NULL] [DEFAULT] [CHECK] [UNIQUE], column2 datatype, column3 datatype, ... columnN datatype); 其中 column1 - N 为列的名称，例如编号、名字、年龄等等，datatype 为该列数据的数据类型，为 TEXT、INTEGER、REAL、BLOB 中的一种。列名和列数据类型，这两个是必选的，也就是创建一个列必须要有这些信息。 后面跟随的 PRIMARY KEY、NOT NULL、DEFAULT、CHECK、UNIQUE 等都是该列数据上执行的强制规则即约束，是可选的。这些约束用来检查插入到该列的数据，是否是符合规则的，以保证数据的的准确性和可靠性。其含义分别如下： 约束 说明 例子 PRIMARY KEY 主键，用来唯一标示数据库表中的各行记录 编号 INTEGER PRIMARY KEY NOT NULL 确保该列数据不能有 NULL 值 年龄 INTEGER NOT NULL DEFAULT 当该列没有制定值时为该列提供默认值 薪水 INTEGER DEFAULT 5000 UNIQUE 确保该列中所有值时不同的 ID INTEGER UNIQUE CHECK 用来检查该列中的所有值满足某些条件 性别 TEXT CHECK(性别 in (“男”, “女”) 另外如果列的数据类型为 INTEGER 还可以使用 AUTOINCREMENT 关键字，实现该字段值的自动增加。不过 AUTOINCREMENT 关键字除了要求列的数据类型为 INTEGER 外，还要求该列必须是主键即有 PRIMARY KEY 约束，两者必须配合使用。另外在插入数据到数据表的时候不要指定该列，即可实现字段的自动增加，详细请参考 3.1 节。 例如： 123456789CREATE TABLE 员工( 编号 INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, 姓名 TEXT NOT NULL, 性别 TEXT NOT NULL CHECK(性别 IN (\"男\",\"女\")), 年龄 INTEGER NOT NULL, 薪水 INTEGER NOT NULL DEFAULT 5000, 工号 INTEGER NOT NULL UNIQUE, 图像 BLOB); 2、删除表删除表的语法为： 1DROP TABLE TABLE_NAME; 例如： 1DROP TABLE 员工; 三、SQLite 数据行操作1、添加数据行创建了表之后就可以向表中添加数据了，每条数据都成为表中的一行，其中包含了创建表时制定的各列的数据。添加数据行的语法为： 12INSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)]VALUES (value1, value2, value3, .... valueN); 添加数据行时可以选择指定要添加的列名称，然后 在VALUE 中的值要与指定的列一一对应。这种情况通常用忽略有默认值、可以为 NULL、以及有 AUTOINCREMENT 关键字的行。如果不指定列的名称那么 VALUE 的值必须与列在表中的顺序一一对应。 例如： 12INSERT INTO 员工 VALUES(1, \"张三\", \"男\", 32, 5000, 18001, NULL);INSERT INTO 员工(姓名, 性别, 年龄, 工号) VALUES(\"张三\", \"男\", 32, 18001); 以上两个语句是等效的，第一个语句没有指明列名，因此需要按照顺序来排列 VALUE 值。第二个插入语句忽略了编号、薪水、图像，编号具有 AUTOINCREMENT 关键字，如果不指定会自动增加，而薪水有 DEFAULT 约束如果没有指定值的话则使用默认值 5000，图像没有 NOT NULL 约束因为可以为 NULL。 对于 BLOB 类型的数据插入以 Python 为例通过一下方法进行： 123456789101112131415161718192021222324252627import sqlite3# Open avatar file and readwith open(\"avatar.png\", \"rb\") as fp: avatar = fp.read() # Open sqlite databaseconn = sqlite3.connect(\"test.db\")cursor = conn.cursor()# Insert a record with blob datacursor.execute(\"INSERT INTO 员工 ('姓名', '性别', '年龄', '工号', '图像')\" \"VALUES ('张三', '男', 32, 18001, ?)\", [sqlite3.Binary(avatar)])# Commit saveconn.commit()coon.close()``` ### 2、更新数据行添加了数据行之后，如果需要更新数据行则需要使用 `UPDATE` 语句，语法如下：```SQLUPDATE TABLE_NAMESET column1 = value1, column2 = value2 ...., columnN = valueNWHERE [condition]; 更新语句需要指定要更新那些列的数据，以「列名=值」的方式方式进行更新，同时还可以设置更新操作的条件即 WHERE 语句后面跟随的条件，如果不指明条件则会更新表中所有的列数据。 例如： 12UPDATE 员工 SET 薪水=8000;UPDATE 员工 SET 薪水=8000 WHERE 姓名=\"张三\"; 第一条语句没有指定条件，所以表中所有员工的薪水都将统一调整为 8000，第二条语句指定了条件 「姓名=”张三”」所以只有张三的薪水调整为 8000，而其他的员工则不影响。 3、删除数据行删除数据行的语法如下： 12DELETE FROM TABLE_NAMEWHERE [condition]; 注意：和更新语句类似，如果没有指定删除的条件，则会删除所有的数据行即清空数据表。 例如： 12DELETE FROM 员工;DELETE FROM 员工 WHERE 工号=18001; 第一条语句是删除员工表中所有的数据，即清空员工表。第二条语句则是删除工号为 18001 的员工。 4、选择数据行选择数据行可能是 SQLite 中最常用的操作，当建好数据表并存储了数据之后，就需要从数据库中筛选数据了，使用 SELECT 语句来筛选数据了，其语法如下： 123SELECT column1, column2, ... columnNFROM TABLE_NAMEWHERE [condition]; SELECT 语句可以从数据表中获取指定的列，并指定相关的条件来筛选数据。例如获取性别为男的所有员工的薪水、获取所有女员工的年龄等等。 1234567891011121314# 列出所有员工信息SELECT * FROM 员工;# 列出所有员工的姓名和年龄信息SELECT 姓名, 年龄 FROM 员工;# 列出所有男员工的姓名和薪水SELECT 姓名, 薪水 FROM 员工 WHERE 性别=\"男\";# 列出所有姓张的男性员工的姓名、年龄和薪水SELECT 姓名, 年龄, 薪水 FROM 员工 WHERE 姓名 GLOB \"张*\";# 列出所有年龄大于 25 岁的女员工的姓名、年龄和薪水 SELECT 姓名, 年龄, 薪水 FROM 员工 WHERE 性别=\"女\" AND 年龄 &gt; 25; 四、SQLite 其他杂项操作1、获取数据库中所有的表在 SQLite 中可以使用 .tables 指令获取数据库所有表的名称, 也可以使用 SELECT 语句： 12345.tables or SELECT name FROM sqlite_master WHERE type=\"table\" AND name != \"sqlite_sequence\"; 2、获取数据表的 Schema 信息在 SQLite 中可以使用 .schema 指令获取指定数据表的纲要信息，也可以使用 PRAGMA 语句来获取表的纲要信息，语法如下： 123456.schema 员工orPRAGMA table_info(员工); 使用 .schema 列出表的信息是创建数据表时的 CREATE 语句的原始内容，比较适合人阅读，如果使用程序来解析，PRAGMA 则更为合适。其列出的内容是一个 6 列 N 行的数据表，每一行代表数据表中每一列的属性，其中包含列编号（cid）、列名称（name）、列数据类型（type）、不能为空（notnull）、默认值（dflt_value）、是否是主键值（pk）等。 例如，在 2.1 中创建的「员工」表列出的表信息如下： cid name type notnull dflt_value pk 0 编号 INTEGER 1 1 1 姓名 TEXT 1 0 2 性别 TEXT 1 0 3 年龄 INTEGER 1 0 4 薪水 INTEGER 1 5000 0 5 工号 INTEGER 1 0 6 头像 BLOB 0 0 五、使用 Python 接口操作 SQLitePython 可以使用 sqlite3 模块来操作 SQLite, 其集成了一个 DB-API 2.0 规范兼容的 SQL 接口，该模块在 Python 的标准库，可直接调来使用。其常用操作如下： 1、打开/链接数据库、创建 cursor1234import sqlite3conn = sqlite3.connect(\"test.db\")cursor = conn.cursor() 2、执行 SQL 语句获取执行结果12cursor.execute(\"SELECT * FROM 员工;\")records = cursor.fetchall() 3、提交数据关闭12conn.commit()conn.close() 更多的操作可以参考我的 PyAppFramework 仓库中 SQLiteDatabase 模块。其提供了 SQLite 常用操作的简单封装，如：获取数据库所有表名称、获取数据表信息、获取数据表列名称、获取数据表 PRIMARY KEY、获取表的所有数据、创建表、删除表、插入数据列、更新数据列、删除数据列、刷选数据等操作。","tags":[{"name":"SQLite、Python","slug":"SQLite、Python","permalink":"http://amaork.me/tags/SQLite、Python/"}]},{"title":"用 GIMP 制作透明图标","date":"2018-05-11T15:09:28.000Z","path":"2018/05/11/用 GIMP 制作透明图标/","text":"最近做一个的 Qt 项目，需要放置一些图标按钮在工具栏上，让这些图标的背景变透明，然后更改工具栏的背景来实现一些效果。在网上找了一些素材用，但有些素材的背景是白色的而不是透明的，就需要有工具把白色的背景替换为透明的。使用 GMIP 制作的的过程非常简单： 一、打开图标 二、添加透明图层在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 添加透明通道 (Add Alpha Channel) 如果透明通道已存在，可以省略该步骤。 三、选取背景颜色点「吸管」工具，选中想要变透明的背景的颜色。将背景颜色的值复制下来，即下图红框中的值。 四、背景颜色到透明在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 颜色到透明 (Color to Alpha)。在弹出的对话框中，点来自（From）,然后在弹出的颜色到透明对话框中，粘贴上一步通过吸管获取的背景的颜色，点确定，然后开始转换。 五、保存透明图标经过以上几步操作后，蓝色背景的图标就变成了透明图标，如下图所示。最后需要将图标导出，需要注意：只有 PNG 和 GIF 格式的图片支持透明通道，推荐 PNG 格式。","tags":[]},{"title":"用 GIMP 制作透明图标","date":"2018-05-11T15:09:28.000Z","path":"2018/05/11/用 GIMP制作透明图标 /","text":"最近做一个的 Qt 项目，需要放置一些图标按钮在工具栏上，让这些图标的背景变透明，然后更改工具栏的背景来实现一些效果。在网上找了一些素材用，但有些素材的背景是白色的而不是透明的，就需要有工具把白色的背景替换为透明的。使用 GMIP 制作的的过程非常简单： 一、打开图标 二、添加透明图层在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 添加透明通道 (Add Alpha Channel) 如果透明通道已存在，可以省略该步骤。 三、选取背景颜色点「吸管」工具，选中想要变透明的背景的颜色。将背景颜色的值复制下来，即下图红框中的值。 四、背景颜色到透明在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 颜色到透明 (Color to Alpha)。在弹出的对话框中，点来自（From）,然后在弹出的颜色到透明对话框中，粘贴上一步通过吸管获取的背景的颜色，点确定，然后开始转换。 五、保存透明图标经过以上几步操作后，蓝色背景的图标就变成了透明图标，如下图所示。最后需要将图标导出，需要注意：只有 PNG 和 GIF 格式的图片支持透明通道，推荐 PNG 格式。","tags":[]},{"title":"2017 年度读书总结","date":"2018-01-07T08:39:46.000Z","path":"2018/01/07/2017 年度读书总结/","text":"2017年，我总共读了 80 本书，为 45 本书做了读书笔记。书目主要集中在投资理财、思维方式训练、小说散文以及中国古代财政政策方面。读书时间主要集中在早晚上下班地铁中，以及晚饭后到睡觉前的这段时间，周末也有读，但效率不是很高，周末在家中有太多干扰阅读的事情。这些书中只有两本是纸质书，我现在买书的原则是：有电子版就买电子版，没有电子版的时候才考虑纸质书，一方面是电子书比较方便在地铁中阅读，另外一方面是因为搬家的时候纸质书真的是太重了！！！ 书目如下，书名加粗的是我比较推荐的，推荐的理由是这些书给我带来了新的技能、新的认知，能让我以不同的视角了解事情，或者是这些书读起来让我感觉轻松愉快（是的，推荐的理由就是这么简单粗暴:D）。以下分类是我按照自己的理解分类的，不是很严谨： 一、投资理财 不炒股只投基，低风险赚出高收益 傻瓜式投资 治富 财务是个真实的谎言 小狗钱钱 指数基金投资指南（雪球） 指数基金投资指南 解读基金：我的投资观与实践 业余投资者的十条军规 银行行长不轻易说的理财经 富爸爸，穷爸爸（重读） 富爸爸，点石成金 富爸爸，21世纪的生意 富爸爸，商学院 邓普顿教你逆向投资 二、思维方式 拆掉思维里的墙 认知盈余 巴菲特之道 随机漫步的傻瓜 清醒思考的艺术 明智行动的艺术 巴菲特传 细节 超越智商：为什么聪明人也会做蠢事 暗时间 黑匣子思维 稀缺 先发影响力(影响力作者的第二部作品，影响力也很棒) 穷查理宝典 三、小说散文 鱼王 阴兽 人间椅子 风起陇西 平民之宴 哈利波特 美国众神 冰与火之歌（15 年买的书 17 年看完，惭愧） 碟形世界：猫和少年魔笛手 这些人，那些事 有时 阿勒泰的角落 走夜路请放声唱歌 1984 三毛流浪记 四、其他分类 哈佛评论：乔布斯的管理课程 你为什么是穷人 哲学家们都干了些什么 未来世界的幸存者（阮一峰博客） 如何科学地学英语 谈美 谈修养 人类砍头小史 大空头 创业就是要细分垄断 90秒抵达安全 跟任何人都聊得来 小顾聊神话 史家高华 那些古怪又让人忧心的问题 电影品格 我是评香师 认同感：用故事包装事实的艺术 一小时外 中国人的气质 民主的细节 观念的水位 马伯庸笑翻中国史 只有偏执狂才能生存 极简主义 睡眠革命 巨富 枪炮、病菌与钢铁 品牌洗脑 身份的焦虑 极简人类史 说中国 血酬定律 大国大城 中央帝国的财政密码 历代中国经济变革得失","tags":[]},{"title":"iOS Workflow 初体验","date":"2017-11-05T08:09:02.000Z","path":"2017/11/05/iOS-Workflow-初体验/","text":"Workflow 介绍前阵子某电商 iPhone 8 大降价，就趁机入手了一个，用了 3 年的 5S 终于退役了。之前用的是 iOS 8,升级到 iOS 11 之后感觉变化还是很大的。让我觉得比较新颖的是 Workflow 这个应用（虽然这个应用早就出来了，之前从来没有用过），其主要功能是将一系列操作整合到一起，然后一键自动执行，用来提高效率，比如一键分享图片到各个社交平台。 当然，它有各种各样的用法，就看你的需求和想象力了。其内置了一系列操作称之为 「Action」。你可以根据你的需要，把各种「Action」组合起来，形成一个「Workflow」，然后一键执行。看了几个例子和帮助文档之后，我决定自己做一个试试。 Air Quality Index 制作思路在 macOS 有个很著名的应用 「Alfred」,其内部也支持 Workflow，其中有一个查询空气质量的 Workflow, 我决定先仿照这个来一个。其大概工作流程是： 首先需要去 PM25.IN 了解一下查询控制质量 API 的使用，要想查询空气质量，需要一个 PM25.IN 的 AppKey。为了简便起见，就没有申请新的 AppKey，使用其公共测试 AppKey，以后正常使用的时候，最好单独申请一个属于自己的 AppKey。 得到 AppKey 之后，通过http://www.pm25.in/api/querys/pm2_5.json这个接口去获取空气质量数据，调用方法，参照其文档： 我们至少需要传递一个参数，即城市的名称，然后这个 API 回返回一个数组，数组中的每个项都是一个字典，代表这个城市一个检测点的数据，我们关心的数据有，监测点名称（position_name）、空气质量（quality）、空气质量指数（aqi）、PM2.5 颗粒小时平均值（pm2_5）等参数。 了解了这些之后就可以动手做了，从一个程序员的角度来看「Workflow」类似一种图形化的编程工具，其提供了Scripting类似一种图形化的编程语言。通过它你可以给变量赋值、获取变量值、流控制、循环控制、处理列表，字典等数据等。其他的功能类似于其他编程语言中的库，你可以通过这些库，获得设备的信息、或者对图像进行处理、发起 HTTP 请求等等，最终通过「Alert」、「Notification」、「Vibrate」、「Play Sound」、「Speak Text」等表现方式 ,将处理后的结果输出。 需要注意的是，每个「Action」都有一个输入和输出，上一个「Action」的输出，默认会成为下一个「Action」的输入，在有些地方需要将数据保存到变量中，以免被覆盖，在后面使用的时候，再取出来。更详细的文档说明参考 Workflow Documentation. Air Quality Index 使用说明可以从 Air Quality Index 下载我做的查询空气质量 Workflow，在使用的时候，替换你在 PM25.IN 中申请的 AppKey, 替换位置如下截图中的Text中的值（默认使用的是 PM25.in 公共测试 AppKey） 然后，根据自己的使用情况，将经常查询的城市，加入到如下截图所示的List中，这样就可以快速查询这个城市的空气质量情况 最终运行效果如下： st=>start: 开始 e=>end: 结束 op_input=>operation: 获取城市名称 op_get_aqi=>operation: 向「PM25.in」查询空气质量数据 op_data_proc=>operation: 对返回数据解析处理，进行格式化 op_show_data=>operation: 展示查询城市的空气质量 st->op_input->op_get_aqi->op_data_proc->op_show_data->e{\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);","tags":[{"name":"iOS Workflow","slug":"iOS-Workflow","permalink":"http://amaork.me/tags/iOS-Workflow/"}]},{"title":"Hexo 绑定二级域名","date":"2017-10-28T13:25:09.000Z","path":"2017/10/28/Hexo-绑定二级域名/","text":"上周末把 Hexo 摸索了一遍，部署在了 Github Pages 上，详细过程就不多说了，网上有很多教程。今天要讲讲，如何绑定二级域名。 首先你需要有一个域名，可以到万网或国外的Godaddy购买 在域名供应商提供的域名解析服务中添加一条 CNAME 记录，指向你博客的 Github Pages 地址例如blog.yourdomain.xxx -&gt; yourname.github.io 在博客目录的 source 目录中添加一个名称为 CNAME 的文件，文件中存放你第二部 CNAME 中添加的域名例如：blog.yourdomain.xxx 打开 Github 存放你博客仓库的设置菜单，找到 Custom domain, 填入你的博客地址，保存 重新部署到 Github Pages 经过以上几步，这样当你通过二级域名 blog.yourdomain.xxx 访问博客的时候，经过域名服务器的映射就自动跳转到了 Github Pages 地址。注意：域名记录的生效需要花费时间，通常不会超过 72 小时","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://amaork.me/tags/Hexo/"}]},{"title":"我的读书笔记变迁史","date":"2017-10-28T06:19:54.000Z","path":"2017/10/28/我的读书笔记变迁史/","text":"我读书素来有整理笔记的习惯，总觉得读了一本书之后，不把书中的思想要点和自己的理解，以笔记的形式记录下来，就会很快忘掉。整理读书笔记是个很繁琐的事情，当然，整理读书笔记还是有很多好处的。比如说可以方便地进行定期回顾，加深自己的理解、日后查找资料的时候可以快速检索、可以把当时自己的想法记录下来供日后参考，另外还有增强自己成就感的好处，看着自己整理下来一篇篇的读书笔记，还是很有成就感的。 在使用 Kindle 之前，我所有的读书笔记都是在豆瓣读书中整理的，那还是 iPhone 4S 时代，豆瓣推出了一个「豆瓣笔记」的手机应用 （不是现在的「豆瓣阅读」）, 可以在那个应用中整理笔记。只需要填写章节的名称、页码，可以摘抄书中的内容，然后在后面附上自己的读书心得，也可以加照片作为附件，刚好满足了我的需求。然后就一直用了下来，我在「豆瓣笔记」中整理了 19 本书 227 条笔记。可惜好景不长，在豆瓣推出自己的电子书业务「豆瓣阅读」后，就把「豆瓣笔记」这条线给砍了，软件不再更新，后来我换手机之后，就没有继续在那「豆瓣笔记」中整理笔记了。 这中间还有一段小插曲，任何东西刚推出，需要拓展客户的时候都是很给力的，「豆瓣阅读」也不例外，我记得当时充值很优惠，好像是充 50 当 100 用，记不清楚了。「豆瓣阅读」刚推出的时候，亚马逊的 Kindle 系列电子书还没有正式进入中国，可以在淘宝上买国外的用，不过只能自己复制书进去看，不能在线购买。我尝试「豆瓣阅读」另外一个原因是，它可以把你买的电子书转换成适合 Kindle 6 寸屏的 PDF，然后通过邮件推送给你。不过这个服务也很快就停止运营了，原因是 Kindle 正式在国内上线了。对于喜欢阅读的我，当然是毫不犹豫的来了一个，这就是 Kindle Paperwhite 一代，自此上了亚马逊的船至今。 经历了「豆瓣笔记」停止更新事件之后，我又尝试了其他的一些服务，比如在 Evernote、OneNote 上整理笔记，不过都不太理想。这些平台虽然可以同步，但都不支持 Markdown 语法，而且内容放在别人平台上很不放心，谁知道将来这些平台什么时候停止运营呢，即便在停止运营前可以把你的内容导出，但自己还要二次处理，还是很麻烦的。 「豆瓣笔记」停止更新后，我就把自己的读书笔记导出来了，导出为 XML 格式。后来自己用 TinyXML2 写了一个 C++ 命令行小程序 doubanNote2Markdown 把「豆瓣读书」的导出的 xml 文件转换成 Markdown 格式。说实话写的很粗糙，那会儿还没有用 Python 呢，要不用 Python 干这事儿简直太轻松，说不定还能上界面呢。总之，它圆满地完成了任务，我也就没再管它了。转换后的效果如下： 几经折腾，我发现整理笔记最合适的方式是，将笔记整理成使用 Markdown 语法的文本文件，然后通过某种服务，同步管理这些文件。首先想到的是各种网盘，可惜最好用的 Dropbox 在国内早就不能用了。国内的几家网盘提供商，说实话我不太信任，自己的东西可能随时被删掉。所以个人觉得最稳妥的方法是使用 Git 来管理。如果读书笔记的内容不是私密的，可以在 Github 中新建一个仓库来管理，如果是私密的，可以存放在自己私有的 Git 服务器上。我目前就是这样做的，当然不是为了存放读书笔记专门建立的 Git 服务器，而是兼用。 这样做优点就不用说了，说说缺点吧，缺点就是在移动设备上查看的时候，不是很方便。我目前的解决方案是，定期把这些读书笔记整理成 PDF 这样就可以在各种设备上查看了。现在有各种各样的 Markdown 编辑器，可以把 Markdown 转换为 PDF 或 HTML 甚至可以生成静态网站，我目前用的是 MWeb，感觉不错，而且支持七牛做图床 (MWeb 看到了，请给我打广告费(^_^))","tags":[]},{"title":"博客正式上线","date":"2017-10-21T13:58:11.000Z","path":"2017/10/21/博客正式上线/","text":"早在去年就有了写博客的想法，一方面，想把自己碎碎念的想法，和日常工作中遇到的问题和解决思路整理起来，好方便日后回顾。另外一方面，想借助互联网这个开放的平台，扩大自己的影响力，同时多结识志同道合的朋友。 去年的时候研究了一阵子 Django + Bootstrap + VPS 的方案，还做了几个 Deom。感觉用 Django 做个人博客有点儿大材小用，而且很多东西需要自己捣鼓，特别是 Markdown 渲染这块儿是比较头疼的，再后来因为有其他事情耽搁，就放下。 直到今年接触到了 Hexo 这个平台，发现用它做个人博客真的是太合适不过了，就像它宣称的那样小巧、快捷、支持 Markdown 而且可以部署在 Github 上。于是，今天下午就花了一下午的时间把这个捣鼓上了。我是大学毕业后半路出家，搞嵌入式软件开发的，对前端这块，实在是一窍不通。好在有许多人把自己 Hexo 使用的主题分享出来了，要特别感谢 @郑超 我现在用的这个主题就是他做的。 总言之，我的博客上线啦，后续我会把这几年在工作中遇到的问题，和解决的思路整理出来，希望能帮助到别人，同时也可以加深自己的记忆和理解。","tags":[]},{"title":"Test","date":"2017-10-21T10:46:45.000Z","path":"2017/10/21/Test/","text":"This is a test pageQuoteLife never gets easier, yor just get better. Python12def func(): print(\"Hello World\") C12345int main(int argc, char **argv) &#123; printf(\"Hello World\\n\"); return 0;&#125; Table Header1 Header2 cell1 cell2","tags":[]},{"title":"Hello World","date":"2017-10-21T10:36:45.000Z","path":"2017/10/21/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]