<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amaork&#39;s Blog</title>
  
  <subtitle>It never gets easier, you just get better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://amaork.me/"/>
  <updated>2018-06-24T13:55:35.496Z</updated>
  <id>http://amaork.me/</id>
  
  <author>
    <name>amaork</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《优秀的绵羊》读书笔记</title>
    <link href="http://amaork.me/2018/06/24/%E3%80%8A%E4%BC%98%E7%A7%80%E7%9A%84%E7%BB%B5%E7%BE%8A%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://amaork.me/2018/06/24/《优秀的绵羊》读书笔记/</id>
    <published>2018-06-24T13:54:37.000Z</published>
    <updated>2018-06-24T13:55:35.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优秀的绵羊"><a href="#优秀的绵羊" class="headerlink" title="优秀的绵羊"></a>优秀的绵羊</h1><h6 id="德林谢维奇"><a href="#德林谢维奇" class="headerlink" title="德林谢维奇"></a>德林谢维奇</h6><p>反思能力是精神生活的关键，而独处则是反思的前提。</p><h2 id="那些头顶光环的年轻人"><a href="#那些头顶光环的年轻人" class="headerlink" title="那些头顶光环的年轻人"></a>那些头顶光环的年轻人</h2><p>当你的生活中没有被给予犯错空间的时候，你唯一能做的就是不给错误任何机会。这一切使得人对风险极力回避，这也是为什么精英教育阻碍个人成长的一大原因。</p><p>我们现在的教育系统培育出了高智商，有成就的二十几岁的年轻人，但却没有教育他们领悟生命的追求，他们甚至不知道如何去寻找生命的意义。他们按部就班地生活，缺乏新生活的想象力，在内心深处，他们也缺乏勇气和自由来创造自己的道路。</p><h2 id="「天才」背后的「魔鬼式」训练"><a href="#「天才」背后的「魔鬼式」训练" class="headerlink" title="「天才」背后的「魔鬼式」训练"></a>「天才」背后的「魔鬼式」训练</h2><p>为了迎合父母的需求而建立起来的「自我」是一种「伪自我」。当一个孩子力争满足父母的要求时，往往自己的感受和渴望会被忽视，久而久之，这个孩子将失去关怀自己感受和渴望的能力。</p><p>学生们之所以会参加体育、艺术或者领导能力的活动，其动力并非源自内心对这些精神的信仰。而是因为这是通向名校的必经之路。这些活动原本是有意义的，但是现在被简化成一种手段；体育竞技讲究的是体能训练；音乐不过是技术上的娴熟；服务他人则等同于做慈善；领导能力无非就是追求位高权重。</p><h2 id="大学的使命"><a href="#大学的使命" class="headerlink" title="大学的使命"></a>大学的使命</h2><p><strong>「教育就是当你忘记了所学的一切之后所存活下来的那一部分」。虽然这是一种通俗的定义，但是提出此观点的哈佛大学前校长詹姆斯·B·柯南特的初衷是严肃的：我们在大学的大部分所学必然会慢慢淡忘，剩余的部分其实就是你自己。</strong></p><p>金钱固然重要，它支撑着职业发展、生活保障和国民实力等，但问题是，需要我们关心的仅仅是金钱吗？个人的生活不仅限于工作，而工作不仅限于收入；国家不仅限于它的财富，而教育也不仅限于培养职场能力。我们要千万警惕企业家或政治家的蛊惑，作为一个人，你要相信自己不仅限于能为企业产出多少利润或为国家贡献多少 GDP。追求大学的使命是什么，无异于追寻生命的目的，即社会存在的意义以及人存在的意义。</p><p>真正的教育（即：「博雅教育」）的首要责任是教会人类把自己从以讹传讹所形成的常识中解救出来，先要认清它，其次质疑它，最后从新的角度思考它，而不是被「常识」这匹蒙着眼睛的野马拉着跑。</p><p><strong>一个人之所以有意思，是因为他大量阅读，习惯思考，放缓脚步，投入深度对话，并为自己创造了一个丰满的内心世界。</strong></p><h2 id="创建自己的生活"><a href="#创建自己的生活" class="headerlink" title="创建自己的生活"></a>创建自己的生活</h2><p>选择做一些自发纯粹的事情，就如同你小时候那样；选择做一些即使没有外在奖励你也会做的事情；选择做一些你可以废寝忘食地专注去做的事情；做你最喜欢做的事，不是你认为自己喜欢或者应该喜欢的，而是你的真爱。</p><p><strong>创建属于自己的生活的前提是，我们首先要铲除整个教育系统潜移默化地在我们心中播下的那颗种子；恐惧失败。斯坦福大学教授威廉·达蒙一直强调面对失败的态度，绝不能知难而退，反而要学会坦然面对，这就是成长不可或缺的一部分。经历失败最大的收获应该是，让每个人清楚地意识到失败并非世界末日。</strong></p><p><strong>一个人必须要学会临危不惧；有些恐惧感是具有实际意义的，但是面对源于不安全感的恐惧，你需要迎面而上。不知道多少父母已经忘记，年轻时一种独特的能力，它可以使我们百折不挠。</strong></p><p>我们必须抵制这种缺乏内涵的声音。在你的苹果电脑上粘贴「我是一个独立个体」或类似的语言标签并不意味着你真的是「一个独立个体」；不论是在身体某部位打孔，长了一脸的胡须还是移居到得克萨斯州的奥斯汀，这些行为都不会使你变成一个独立的个体。因为成为独立个体，拥有精神勇气是不可能通过配备装饰的方式而实现的。任何形式的消费，虽然流行的家具或音乐本身很好，但是它们只是在外在的搭配，都是无用之功。Facebook 也不例外，在 Fackbook 网页上引用名人名言并不会帮助你成为一个独立思考者。总而言之，如果你未曾放弃什么，那根本就谈不上精神勇气。挫折、牺牲、内心挣扎出师不利、走弯路、与家人和朋友之间的矛盾等，这些才算是真正意义上走向独立的特征。只有通过，才是真实的。</p><p>原因很简单：作为一个国家，以任何标准来衡量，美国仍旧是强大的国度。生活在这个地方，我们获得了一个比致富更加稀缺也更加难能可贵的机会：一次可以选择不追求财富的机会。讲得更具体些，在美国，我们有机会找到人生的目的，拥抱自己的使命，同时依旧生活的很体面。</p><h2 id="聪明人的道德和责任"><a href="#聪明人的道德和责任" class="headerlink" title="聪明人的道德和责任"></a>聪明人的道德和责任</h2><p>每个人生活中必然有不愉快之事，尤其是年轻人的生活，而且不快的经历是任何个人，机构乃至社会转型进步的基石。只有当你的内心或者灵魂感受到现在的自我和追求的自我之间的差距时，变化才会随之产生。</p><h2 id="精英教育的自我救赎"><a href="#精英教育的自我救赎" class="headerlink" title="精英教育的自我救赎"></a>精英教育的自我救赎</h2><p>新的社会形态必须保证特权不会代代相传，这个非常重要。教育系统必须能调节整个社会的阶层系统，正如它在 20 世纪中叶所做的那样，而不是复制和繁衍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;优秀的绵羊&quot;&gt;&lt;a href=&quot;#优秀的绵羊&quot; class=&quot;headerlink&quot; title=&quot;优秀的绵羊&quot;&gt;&lt;/a&gt;优秀的绵羊&lt;/h1&gt;&lt;h6 id=&quot;德林谢维奇&quot;&gt;&lt;a href=&quot;#德林谢维奇&quot; class=&quot;headerlink&quot; title=&quot;德林谢
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://amaork.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>macOS 自动挂载 NTFS 为读写权限</title>
    <link href="http://amaork.me/2018/06/09/macOS-%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD-NTFS-%E4%B8%BA%E8%AF%BB%E5%86%99%E6%9D%83%E9%99%90/"/>
    <id>http://amaork.me/2018/06/09/macOS-自动挂载-NTFS-为读写权限/</id>
    <published>2018-06-09T08:27:24.000Z</published>
    <updated>2018-06-09T10:07:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>家里的笔记本买的比较早，当时的 SSD 还是比较贵的，就买了 128G 的版本。用了几年，平时上上网写点程序什么的还够用，最近准备装个虚拟机就发现比较捉襟见肘，于是决定买个 256G 的 SSD 来扩容。想把虚拟机的虚拟盘放在外置的 SSD 上，但 256G 全部拿来放虚拟机硬盘比较浪费，就打算把 SSD 格式化为 NTFS 格式同时兼做移动硬盘来用。</p><p>macOS 默认是支持 NTFS 文件系统的，连接硬盘到电脑上可以自动识别并挂载。但是，是以只读方式挂载的，想要以读写方式挂载，可以打开终端用命令行重新挂载，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载只读挂载</span></span><br><span class="line">sudo umount /dev/disk2s1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建挂载目录</span></span><br><span class="line">sudo mkdir -p /Volumes/SSD</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新挂载为 NTFS 读写模式到 /Volumes/SSD</span></span><br><span class="line">sudo mount_ntfs -o rw,nobrowse /dev/disk2s1 /Volumes/SSD</span><br></pre></td></tr></table></figure><p><code>/dev/disk2s1</code> 是移动硬盘的块设备，这个是根据电脑当前连接了多少个硬盘动态变化的，我的电脑只有默认的硬盘占用了 <code>disk1</code> 因此外接的硬盘为 <code>disk2</code>, 一定要搞清楚了再挂载。<code>/Volumes/SSD</code> 是移动硬盘的挂载点（目录），挂载点可以自己定，必须先创建好挂载点再挂载，我自己写了个 Shell 脚本来帮我自动卸载并重新挂载，挂载点可以自己指定，脚本如下：</p><h4 id="自动挂载脚本"><a href="#自动挂载脚本" class="headerlink" title="自动挂载脚本"></a>自动挂载脚本</h4><p><a href="https://github.com/amaork/scripts/blob/master/shell/macOS_mount_ntfs_as_rw.sh" target="_blank" rel="noopener">macOS_mount_ntfs_as_rw.sh</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">FS_COLUMN=1</span><br><span class="line">MP_COLUMN=9</span><br><span class="line">USER_MOUNT_POINT=$1</span><br><span class="line">DEFAULT_MOUNT_POINT=/Volumes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Eject disk, arg1: disk</span></span><br><span class="line">function eject_disk()</span><br><span class="line">&#123;</span><br><span class="line">if [ -b "$1" ];then</span><br><span class="line">sudo umount $1</span><br><span class="line">ret=`df | grep $1 | awk '&#123;print $'$MP_COLUMN'&#125;'`</span><br><span class="line">if [ -d "$ret" ]; then</span><br><span class="line">echo "Umount disk error!"</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">else</span><br><span class="line">echo "$1 is not a disk!"</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get mount point, arg1: disk, arg2: mount point</span></span><br><span class="line">function get_mount_point()</span><br><span class="line">&#123;</span><br><span class="line">local mp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mount point is specified by user</span></span><br><span class="line">if [ "$USER_MOUNT_POINT" ]; then</span><br><span class="line">mp=$USER_MOUNT_POINT</span><br><span class="line"><span class="meta">#</span><span class="bash"> User <span class="keyword">do</span> not specified use disk basename</span></span><br><span class="line">else</span><br><span class="line">if [ "$2" ]; then</span><br><span class="line">mp=$2</span><br><span class="line">else</span><br><span class="line">mp=`basename $1`</span><br><span class="line">mp="$DEFAULT_MOUNT_POINT/$mp"</span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo $mp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mount as NTFS arg1: disk, arg2: mount point</span></span><br><span class="line">function mount_as_ntfs_rw()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Create mount point <span class="keyword">if</span> it<span class="string">'s not exist</span></span></span><br><span class="line">if [ ! -d "$2" ]; then</span><br><span class="line">sudo mkdir -p $mp</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mount disk as NTFS</span></span><br><span class="line">sudo mount_ntfs -o rw,nobrowse $1 $2</span><br><span class="line">ret=`df | grep $1 | awk '&#123;print $'$MP_COLUMN'&#125;'`</span><br><span class="line">if [ -d "$ret" ]; then</span><br><span class="line">echo "Success, disk [$1] is mount as NTFS r/w mode to [$2]"</span><br><span class="line">else</span><br><span class="line">echo "Failed, disk [$1] mount to [$2] failed!"</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> First get all external disks</span></span><br><span class="line">external_disks=`ls /dev/disk[2-9]s[1-9]`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Check <span class="keyword">if</span> disk is already mounted</span></span><br><span class="line">for disk in $external_disks; do</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get disk mount point</span></span><br><span class="line">mp=`df | grep $disk | awk '&#123;print $'$MP_COLUMN'&#125;'`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Eject disk</span></span><br><span class="line">if [ -d "$mp" ]; then</span><br><span class="line">while true; do</span><br><span class="line">read -p "Disk [$disk] is already mounted on [$mp], do you want to eject it? (Y/N)" option</span><br><span class="line">case $option in</span><br><span class="line">[Yy]*) eject_disk $disk; break;;</span><br><span class="line">[Nn]*) echo "Mount as NTFS r/w mode must ejecd it first"; exit;;</span><br><span class="line">*) echo "Unknown option $option";</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Re-mount as NTFS</span></span><br><span class="line">while true; do</span><br><span class="line">mp=$(get_mount_point $disk $mp)</span><br><span class="line">read -p "Disk [$disk] is ejected, do you want to re-mount as r/w mode to [$mp]? (Y/N)" option</span><br><span class="line">case $option in</span><br><span class="line">[Yy]*) mount_as_ntfs_rw $disk $mp; break;;</span><br><span class="line">[Nn]*) echo "exit!"; exit;;</span><br><span class="line">*) echo "Unknown option $option";</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>这个脚本会自动检测所有除了 <code>disk1</code> 外的所有硬盘，如果硬盘已经挂载，会先询问是否要弹出，然后再询问是否要重新挂载为 NTFS 读写模式。挂载点和之前只读模式的挂载点一样，通常为硬盘的名称，例如：<code>/Volumes/SL-BG2</code>, 如果硬盘已经弹出了，那么默认的挂载点为硬盘块设备的名称。</p><p>例如：<code>/dev/disk2s1</code> 如果已经已经弹出了，那么重新挂载为读写模式的挂载点为 <code>/Volumes/disk2s1</code>，当然也可以通过参数告诉脚本挂载点在哪里，在我的电脑上运行效果如下：</p><blockquote><p>./macOS_mount_ntfs_as_rw.sh /Volumes/SSD<br>Disk [/dev/disk2s1] is already mounted on [/Volumes/SL-BG2], do you want to eject it? (Y/N)y<br>Disk [/dev/disk2s1] is ejected, do you want to re-mount as r/w mode to [/Volumes/SSD]? (Y/N)y<br>Success, disk [/dev/disk2s1] is mount as NTFS r/w mode to [/Volumes/SSD]</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;家里的笔记本买的比较早，当时的 SSD 还是比较贵的，就买了 128G 的版本。用了几年，平时上上网写点程序什么的还够用，最近准备装个虚拟机就发现比较捉襟见肘，于是决定买个 256G 的 SSD 来扩容。想把虚拟机的虚拟盘放在外置的 SSD 上，但 256G 全部拿来放虚拟
      
    
    </summary>
    
      <category term="技术分享" scheme="http://amaork.me/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Shell" scheme="http://amaork.me/tags/Shell/"/>
    
      <category term="macOS" scheme="http://amaork.me/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>《投资中最简单的事》读书笔记</title>
    <link href="http://amaork.me/2018/05/27/%E3%80%8A%E6%8A%95%E8%B5%84%E4%B8%AD%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://amaork.me/2018/05/27/《投资中最简单的事》读书笔记/</id>
    <published>2018-05-27T08:37:11.000Z</published>
    <updated>2018-05-27T08:37:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="投资中最简单的事"><a href="#投资中最简单的事" class="headerlink" title="投资中最简单的事"></a>投资中最简单的事</h1><h6 id="邱国鹭"><a href="#邱国鹭" class="headerlink" title="邱国鹭"></a>邱国鹭</h6><h2 id="以实业的眼光做投资"><a href="#以实业的眼光做投资" class="headerlink" title="以实业的眼光做投资"></a>以实业的眼光做投资</h2><p>好公司的两个标准。一是它做的事情别人做不了；二是他做的事情，自己可以重复做。前者是门槛，决定利润率的高低和趋势；后者是成长的可复制性，决定销售增速。如果两者不可兼得，宁要有门槛的低增长（可持续），也不要没门槛的高增长（不可持续）。门槛是现有的，好把握；成长是将来的，难预测。</p><blockquote><p>门槛就好比有独特的价值做护城河是别人学不来的，以免陷入竞争的烂泥潭</p></blockquote><p>用自己的钱做实业投资要考虑的三个问题就是：行业的竞争格局以及公司是否具有比较优势。简单来说，就是你作为一个后来者，想颠覆既有的龙头老大的位地位，就得看自己能够为客户提供哪些不可比拟的价值，以及相对于竞争对手的比较竞争优势在哪里。</p><p>互联网的本质是『人生人』，优势在于能以及低成本服务无数客户，规模效应体现在『人多』，二八现象不明显，是典型的散户经济，的散户者得天下。银行业的本质是『钱生钱』，规模效应体现在『钱多』， 80% 的业务来自 20% 的客户， 二八现象显著，得大户者得天下，而且那 20% 的大客户是需要线下的高端服务的，这就是网络银行至今在欧美日韩都没有成功的案例的重要原因。</p><p>互联网『人生人』主要靠两条：一条是网络效应（例如淘宝，买家多卖家就多，卖家多买家更多；社交网站，美女多帅哥就多，帅哥多美女更多）二靠人多提升用户体验，用户越多，搜索结果越精确，用户越多对餐厅的点评越靠谱。</p><blockquote><p>互联网的『人生人』模式也就需求侧的规模效应，即网络效应。用的人越多其就越有价值</p></blockquote><p><strong>做投资要研究的就是这些不以人的意志为转移的规律，而不是整天去猜测市场的情绪变化。有时猜测别人的情绪变化能给我们带来收益，但那不是能够持久的。而经济规律、行业特征、商业模式是客观存在的，你只要研究透了，它在三五年内是不会有大的变化的，能为理解这些规律的投资人提供持续的竞争优势。</strong></p><h2 id="人弃我取，逆向投资的关键"><a href="#人弃我取，逆向投资的关键" class="headerlink" title="人弃我取，逆向投资的关键"></a>人弃我取，逆向投资的关键</h2><p>逆向投资是最简单也最不容易学习的投资方式，因为它不是一种技能，而是一种品格——品格是无法学习的，只能通过时间慢慢磨练出来。投资领域的集大成者，大多数都具有超强的逆向思维能力，尽管他们对此的表述各不相同。乔治·索罗斯说：『凡事总有盛极而衰的时候，大好之后便是大坏。』约翰·邓普顿说：『要做拍卖会上唯一的出价者』。查理·芒格说：『倒过来想，一定要倒过来想』。卡尔·伊坎说：『买别人不买的东西，在没人买的时候买』。巴菲特说：『别人恐惧时我贪婪，别人贪婪时我恐惧。』</p><p>一只下跌的股票是否值得逆向投资的关键在于以下三点：</p><ol><li>首先，看估值是否够低、是否已经过度反应了，可能的坏消息。</li><li>其次，看遭遇的问题是否是短期问题、是否是可解决的问题。</li><li>最后，看股价暴跌本身是否会导致公司的基本面进一步恶化，既是否是索罗斯所说的反身性。</li></ol><p>逆向投资并非一味与市场作对，因为市场在大多数时候是对的。但有的时候市场也可以错得很离谱， 这时就不必在意市场的主流观点了。在大多数时候， 真理在大多数人手里；在少数时候，真理在少数人手里。如何区别，这两种情况呢？一般来说，趋势是初期和末期，就是真理在少数人手里的时候。</p><h2 id="便宜才是硬道理"><a href="#便宜才是硬道理" class="headerlink" title="便宜才是硬道理"></a>便宜才是硬道理</h2><p><strong>当一大堆钱涌进一个门槛不高、未来发展路径不明的行业是，失望是常有的事。没有门槛的高增长是不可持续的。</strong></p><p><strong>做投资最重要的是什么呢？投资中影响股价的涨跌的因素是无穷无尽的，但是最重要的其实只有两点，一个是估值，一个是流动性。估值就是价格相对于价值，是便宜了还是贵了，估值决定了股票能够上涨的空间，流动性这决定了股市涨跌的时间。</strong></p><p>我们都知道， M2 的合理增速，应该大致比名义 GDP 快 2～ 3 个点。相对于我们的经济增长速度，当前货币供应量只是一个基本的、能够满足现有经济运行需要的水平。</p><p>山姆·沃尔顿，沃尔玛创始人，沃尔玛是现在全世界销售和最大的公司，某销售额相当于世界第六大国的 GDP ，达到了相当于德国、英国的经济水平。他有一句名言：<strong>『你只要买的便宜，就可以卖的便宜。』</strong>只要买的时候不是太贵，就不用担心卖不出去。如果你买的时候就特别贵，将来要卖出时就必须要找到一个比你更大的傻瓜，但是这个世界的特点是骗子越来越多，傻瓜不够用，不能老是指望别人当傻瓜。</p><blockquote><p>好的，投资在买进时，就决定了价值。买的足够低（低估）留有一定的安全边际，也不用担心跌的太狠，很容易盈利。</p></blockquote><p>选股票，一定是先选行业。就像卖房子，一定是先看社区，社区不行，房子再漂亮也不行。买股票也是，股票本身再好，只要这个行业不好，一样很难长起来。买房子先选社区，买股票先选行业，那么什么行业是好行业呢？很简单，有门槛、有积累、有定价权的那种行业。</p><blockquote><p>既有品牌护城河定价权的行业</p></blockquote><p>所谓门槛就是就是不是谁想进来就可以进来的。我们都知道中国有 14 亿人，如果某一个行业短期增长很快，利润率很高，就会有1000 个人来山寨你的产品，另外 1000 个人想比你做的规模更大，然后把成本做得比你低。所以你必须处于一个有门槛的行业：需要执照；或者有一定的品牌优势，别人也可以做，但你品牌比别人好；或者你的技术有某种专利；或者你掌握某种矿产或资源，别人没办法无中生有。</p><p>定价权的来源，基本上要么是垄断，要么是品牌，要么是技术专利，要么是资源矿或者相对稀缺的某种特定的资产。这样的行业就会有一定的定价权、一定的门槛，这样才能把竞争堵在门口，才会有积累。</p><p>但是有的行业因为技术变化太快很难有积累，也许积累了很久，拼命挖了很深的护城河，人家可能不进攻这个城，绕了过去又建了新城。最明显的就是高科技行业，电子、科技、媒体和通信技术更新换代太快了。每两三年就更新换代一次，这样的企业很辛苦，要不要投资更新换代？如果不投，别人超过你，你的品牌就会受损，消费者也不买你的产品；如果投，投 20 亿、30 亿甚至 100 亿只能做个两年。</p><blockquote><p>关于这点，巴菲特在买进伯克希尔·哈撒韦的时候有论述，伯克希尔所处的行业属于纺织业。纺织业变化很快，需要不断更新换代生产线，但投资生产线的钱很快又会被取消其他竞争对手所超越，逼着跟进下一次更新换代。不能留下利润，最终收益的就是消费者而不是生产厂家。</p></blockquote><p><strong>通胀环境下买什么股票好？常见的答案是资产资源类股票，因为投资者可以直接受益于价格上涨。更好的答案，也许是那些有定价权的公司：通胀时，他们可以提价，把成本压力转嫁给下游；通胀回落时，他们不必降价就能享受更高的利润率。这些公司包括食品，饮料等品牌消费和工程机械、核心汽配、白色家电等寡头垄断的高端制造业。</strong></p><p>其实，当大家都意识到，这只股票有风险的时候这个风险就不大了。</p><h2 id="投资的三个基本问题"><a href="#投资的三个基本问题" class="headerlink" title="投资的三个基本问题"></a>投资的三个基本问题</h2><p>历史上股市见底信号：</p><ol><li>市场估值在历史低位；</li><li>M1 见底回升；</li><li>降存准或降息；</li><li>成交量极度萎缩；</li><li>社保汇金入市；</li><li>大股东和高管增持；</li><li>机构大幅超配非周期类股票；</li><li>强周期股票在跌时抗跌，涨时领涨；</li><li>机构仓位在历史低点；</li><li>新股停发或降印花税；</li></ol><p>对中小公司而言，管理层时特别重要的。中小公司更多地处于靠个人英雄主义的阶段。有一两百亿以上市值的公司，更需要依靠一种机制而不是某个人。</p><h2 id="宁数月亮，不数星星"><a href="#宁数月亮，不数星星" class="headerlink" title="宁数月亮，不数星星"></a>宁数月亮，不数星星</h2><p>从行业配置角度看，有的行业集中度高，两三个龙头企业就占据了行业中绝大部分的市场份额，研究这样的行业就像数月亮一样简单；有的行业集中度低，参与竞争的企业多如繁星，要把行业的竞争格局搞清楚就像数星星一样困难。研究后者肯定比研究前者困难得多，但是投资收益的高低与研究的难以却非常不成正比。</p><p>如果比较长期的利润增长，数月亮的行业常常战胜数星星的行业。为什么呢？原因很简单。数月亮的行业一般门槛高，参与竞争的企业少，所以竞争有序，坐地收钱，旱涝保收；数星星的行业门槛低，谁都能进来，竞争激烈，经济好时，担心成本上升，经济差时担心需求下降，好日子总是不长。前者是赚钱不辛苦，后者是辛苦不赚钱，比较之后哪一个公司更适合投资，其实是一目了然的。</p><p>最好也最容易研究的竞争格局是『月朗星稀』，就是一家独大，其他竞争对手都不成气候。</p><p>稍差一些的竞争格局是一超多强，彼此之间，虽然有竞争，但老大的优势还是很明显。</p><p>再次一点儿的竞争格局则是『两分天下』和『三足鼎立』。</p><p>最差的竞争格局就是百花齐放、百舸争流的高度竞争行业。这种充分竞争的行业一般是吃力不讨好的行业，长期投资者不妨等待他们通过竞争分出胜负之后再投资。</p><blockquote><p>这种情况完美的匹配了经济学中关于竞争的划分：完全竞争（数星星）—— 垄断竞争 —— 寡头竞争 —— 垄断（数月亮）</p></blockquote><h3 id="股票式债券"><a href="#股票式债券" class="headerlink" title="股票式债券"></a>股票式债券</h3><p>债券下跌后，人们看到的往往是机会，因为人们会注意到债券的未来到期收益率已经因为价格的下跌而上升了；股票下跌后，人们看到的却只是风险，因为股票没有固定的息票和到期日。其实，股票和债券一样，价格大幅下跌后，未来预期收益率就上升；价格但大幅上涨后，未来预期收益率就下降。</p><p>早在 1977 年巴菲特就说过，股票不过是穿着股票外衣来参加华尔街化妆舞会的、长期投资回报率为 12% 的债券。想清楚了这一点，对股市进行逆向思维也就容易了。</p><h2 id="价值陷阱与成长陷阱"><a href="#价值陷阱与成长陷阱" class="headerlink" title="价值陷阱与成长陷阱"></a>价值陷阱与成长陷阱</h2><p>价值投资最重要的是坚守，最害怕的是坚守了不该坚守的。关键是要避开价值陷阱，所谓价值陷阱，指的是那些再便宜，也不应该买的股票，因为其持续恶化的基本面会使股票越跌越贵，而不是越跌越便宜。</p><h3 id="价值陷阱"><a href="#价值陷阱" class="headerlink" title="价值陷阱"></a>价值陷阱</h3><p>有几类股票容易是价值投资陷阱。</p><ol><li>被技术进步淘汰的，这类股票未来利润很可能逐年走低，甚至消失，即使市盈率再低也要警惕。例如数码相机发明之后的柯达。</li><li>赢家通吃行业里的小公司，所谓赢家通吃，顾名思义就是行业老大老二抢了老五老六的饭碗。在全球化和互联网时代，很多行业的集中度提高是大势所趋，行业龙头在品牌渠道，客户年度成本等方面的优势只会越来越明显，这时，业内的小股票，即使再便宜也可能是价值陷阱。</li><li>分散的、重资产的夕阳行业。夕阳行业，意味着行业需求不再增长；重资产，意味着需求不增长的情况下，产能无法退出，如果退出投入的资产就会作废；分散，意味着供过于求时行业可能无序竞争甚至价格战，因此这类股票的便宜是假象，因为其利润可能会可能每况愈下。</li><li>景气顶点的周期股。在经济扩张晚期，低市盈率的周期股也常是价值陷阱，因为此时的顶峰利润是不可持续的。所以周期股有时可以参考市净率和市销率等估值指标，在高市盈率时买入（谷底利润）买入，在低市盈率时（顶峰利润）卖出。</li><li>有会计欺诈的公司。但是这类陷阱并不是价值股所持有的，成长股中欺诈行为更为普遍。</li></ol><p>这几类价值陷阱有个共性：利润的不可持续性，因此，目前的便宜只是表象，基本面进一步恶化后就不便宜了。</p><blockquote><p>价值陷阱有些类似与索罗斯的反身性，即股价下跌对公司基本面有负面作用，易形成自我强化的恶性循环。</p></blockquote><h3 id="成长陷阱"><a href="#成长陷阱" class="headerlink" title="成长陷阱"></a>成长陷阱</h3><p>许多国家的历史数据表明，高估值的成长股平均回报远不及低谷期的价值股，原因就在于成长陷阱比价值陷阱更常见。</p><ol><li>估值过高</li><li>技术路径踏空</li><li>无利润增长</li><li>成长性破产</li><li>盲目多元化</li><li>树大招风</li><li>新产品风险</li><li>寄生式增长</li><li>强弩之末</li><li>会计造假</li></ol><p>各类价值陷阱的共性是利润的不可持续，各类成长陷阱的共性是成长的不可持续性。成长是个好东西，好东西人人想要，想要的人太多了，就把价格抬高了。而人性又总把未来想象的太美，预期太高，再好的东西被过度拔高后也容易失望，失望之后就变成了陷阱。成长本身并不是陷阱，但人性的弱点中对未来成长习惯性地过高预期和过高估估值却是不折不扣的陷阱。</p><h2 id="真假风险与安全边际"><a href="#真假风险与安全边际" class="headerlink" title="真假风险与安全边际"></a>真假风险与安全边际</h2><h3 id="真假风险"><a href="#真假风险" class="headerlink" title="真假风险"></a>真假风险</h3><p>风险有两种，一种是感受到的风险，另一种是真实的风险。股票暴涨后，真实的风险上升，感受大的风险却在下降，在 6000 点股市最危险的时候，大家感受到的都是歌舞升平；股票暴跌后，真实的风险下降，感受到的风险上升，在 2000 点股市相对低谷时，人们感受到的全都是凄风苦雨。</p><p>从另一个角度看，风险可以分为暴露的风险和隐藏的风险。我们要承担暴露的风险，因为人们已经对其避之唯恐不及，危险性已经反映在价格里了，承担这样的风险会有相应的高回报。此外，我们还要避开隐藏的风险，因为人们还没有意识到它的存在，承担这样的风险，没有相应的回报。</p><p>再换个角度看，风险还可分为价格波动的风险和本金永久性损失的风险。当市场在 5000 多点时，估价『天天向上』，风平浪静，价格波动的风险貌似不大，但本金永久性损失的风险却十分巨大；当市场在 2000 点时股价『跌跌不休』波涛汹涌，价格波动的风险好像很大，但本金永久性损失的风险却已急剧缩小。</p><p>两种风险：一是股价短期波动的风险，二是本金永久性丧失的风险。股价下跌的过程中，第一种风险在加大，第二种风险在减小。很多人只看到第一种风险，于是追涨杀跌，往往在最低点把股票清仓，其实第二种风险才是真正的风险。低谷时的好公司，即使短期波动在所难免，本金永久性丧失的风险也很小。</p><h3 id="安全边际"><a href="#安全边际" class="headerlink" title="安全边际"></a>安全边际</h3><p>管理投资风险的一个重要方法，就是寻找有安全边际的公司，有安全边际的公司通常具有一下特点：</p><ol><li>东方不亮西方亮，给点阳光就灿烂。</li><li>估值低到足以反映大多数可能的坏情况。</li><li>有冗余设计，有备用系统来限制下跌空间。</li><li>价值易估，不具有反身性，可以越跌越买。</li></ol><p>有安全边际的公司通常业务简单，估值易估，不具有反身性。索罗斯说说的反身性是指估价下跌本身对公司的基本面有负面作用，易形成自我强化的恶性循环。例如贝尔登股价跳水会导致交易对手『挤兑』有反身性，故不能越跌越买；可口可乐股票跳水，丝毫不影响它卖饮料，无反身性，故可越跌越买。</p><p><strong>忘掉你的成本，是成功投资的第一步。全市场除了你之外，没有人知道或关心你的买入成本，因此你的成本高低、是否亏损对股票的未来走势没有丝毫影响。</strong></p><h2 id="投资策略"><a href="#投资策略" class="headerlink" title="投资策略"></a>投资策略</h2><p><strong>一样的消息，由于市场环境和市场参与者情绪的不同，在股价中可以有截然不同的体现。弱市中，利好消息常被当作出货的机会；强市中，利空消息常被当作补仓的机会。当市场对坏消息不敏感、对好消息敏感时，表明市场的人气在恢复，也表明悲观，预期已经充分反映在低谷之中了。</strong></p><p>未来 10 年的投资思路</p><ol><li>从资产配置角度来讲，股票比债券好</li><li>从商业模式上看，高利润的模式优于高周转模式，有定价权的公司会好于有成本优势的公司。看一个公司的核心竞争力，无非是资源优势、技术优势、品牌优势、寡头垄断优势、规模优势和成本优势。</li><li>从投资风格上看，价值股好于成长股。</li></ol><h3 id="国家竞争优势"><a href="#国家竞争优势" class="headerlink" title="国家竞争优势"></a>国家竞争优势</h3><p>**迈克尔·波特在《国家竞争优势》中吧国家竞争力发展分为四个阶段：</p><ol><li>生产要素导向阶段（依靠资源或廉价劳动力）；</li><li>投资导向阶段（大规模产生扩展，政府起主导作用）；</li><li>创新导向阶段（政府无为而治）；</li><li>财富导向阶段（社会已富足，强调公平而非效率，社会价值挂帅，实用主义减弱）**</li></ol><p>对大多数发展中国家而言，阶段 2 与阶段 3 之间有着极高的门槛 —— 第二次世界大战之后的半个世纪，实现成功跨越的国家只有日本和韩国。</p><p>在阶段 1，企业之间的竞争优势主要体现在资源独占和价格竞争；在阶段 2，企业的竞争优势体现在规模经济和产业链集群，所以现阶段国企的强势和民企的弱势也是形势使然。但是，想要进入阶段 3，必须让民企成为创新的主体。回顾各国发展史，政府主导的创新鲜有成功的先例。</p><p>中国处在阶段 2，美国处在阶段 4，发展阶段不同，从经济结构（投资 vs. 消费）、主要矛盾（做蛋糕 vs. 分蛋糕）到社会价值取向（强调效率 vs. 强调公平）都不同，但有些人把中美差距简单归因为中国的国民劣根性，有失偏颇。古人所说的仓廪实而知礼节其实是很深刻的。</p><p>伟大的企业是竞争而不是补贴出来的，因此在自由竞争阶段不应该对新兴行业的中小企业补贴；通过市场竞争产生民营寡头后，说明「内战」打完了，胜利者要代表中国参与「外战」了，这时国家对民营寡头在跨国并购、进出口信贷、国际渠道建设和海外知识产权纠纷等多方面的支持是必要的。</p><p>许多人热衷于研究美国，其实中国的经济发展模式与美国根本就不是一个路数，日本、韩国的产业升级道路才是中国应该走的，转型必须依靠发扬既有优势，而不是好大喜功地超前发展所谓的新兴行业。本来打乒乓的人看到别人踢足球赚钱更轻松，就草率决定转型踢足球，令人无语。国际分工不是一场不变的，但转型不该有行政力量强推，那样容易对新兴行业揠苗助长、对传统行业自毁长城。</p><h2 id="投资心理学"><a href="#投资心理学" class="headerlink" title="投资心理学"></a>投资心理学</h2><h3 id="后视镜"><a href="#后视镜" class="headerlink" title="后视镜"></a>后视镜</h3><p><strong>某位对冲基金经理曾引用某冰球运动员的话来类比投资：应该跑向球将要去的地方，而不是球现在所在的地方。犯「后视镜」错误的投资人就是习惯跑向球现在所在的地方，追逐当前的热门板块或主题，于是在所难免比市场慢半拍，因为市场就像冰球一样，总是在不断地运动中。如果从自己的教训中吸取经验，在股市中并不是一件简单的事，大多数人做的其实只是刻舟求剑式的总结，而不是前瞻性跑向球要去的地方。</strong></p><blockquote><p>投资要有前瞻性，在市场火起来之前提前布局（跑向球将要去的地方），这样在市场火起来之后才能获利，否则只是追涨杀跌，只有接盘的份儿。</p></blockquote><h3 id="傻瓜定价说"><a href="#傻瓜定价说" class="headerlink" title="傻瓜定价说"></a>傻瓜定价说</h3><p>1999 年纳斯达克泡沫时，我碰到的某行为金融学教授，他自己有个对冲基金，那年卖空网络股亏了很多钱。他感叹到：「我知道他们傻，只是我没想到他们会那么傻！」聪明人（包括那些自作聪明的人）的悲剧在于，他们往往低估了傻瓜傻的程度。</p><blockquote><p>聪明人能看出市场的狂热和泡沫，但自己无法影响市场的不理智，做空早了，而市场继续狂热，不得不高价补仓。</p></blockquote><p>「聪明人」常常希望傻瓜们傻的「刚刚好」：傻到愿意把价值 1 元的东西以 5 毛的价钱卖给他，但不至于傻到继续把价格砸到 4 毛钱。其实，低估傻瓜傻的程度也是一种傻，能使股价低估 50% 的非理性行为同样也能使其低估 60%。<strong>正如凯恩斯所说，市场持续非理性行为的时间可能长过你持续不破产的时间。</strong></p><p><strong>对市场敬畏但不屈服，逆市场而动但懂得自我保护。抄底时注意安全边际（不用杠杆也是其中之一），避开价值陷阱，远离反身性（会恶性循环、不能越跌越买），精细挑选低估值、高品质（特别是高端品牌或寡头垄断）的股票，然后分期分批加仓，确保判断错误时也不至于粉身碎骨。</strong></p><h3 id="这次不同了"><a href="#这次不同了" class="headerlink" title="这次不同了"></a>这次不同了</h3><p>约翰·邓普顿说，「这次不同了」（This time it’s different） 是英语中最昂贵的四个字。人性的弱点总喜欢把短期的事情长期化，乐观起来就是「黄金十年」；碰到困难时却又觉得从此再也看不到光明了，因为「这次不同了」。其实，经济周期和市场周期总是起起伏伏、周而复始的，太阳底下没有新鲜事。</p><blockquote><p>人喜欢把短期的事情长期化和乐观起来就是「黄金十年」这点，我个人时深有体会的，前阵子在网上接到了几个项目，赚了点外快，感觉不错，就感觉也许以后能靠这种方式生活下去。过度乐观了，冷静下来就会发现这种方式不靠谱的。</p></blockquote><p>过去 40 年香港股市的整体市盈率基本都在 10 ～ 20 倍之间波动，如此反复多个周期，只要稍微研究一下市场的历史都可以发现这个现象，可是几十年来人们的行为反复验证了这么一句话：人们从历史中学到的唯一教训就是人们从来不吸取任何教训。为什么人们会一而再、再而三地在市场高峰附近入市，在市场低谷附近离市呢？原因很简单：当市场估值到高点时，总有些「这些不同了」之类的观点来说明这次的高估值时合理的（例如：新经济，「港股直通车」）；估值到低点时，又会有另一些观点来说明「这次不同了」。（例如金融海啸，网络泡沫）</p><blockquote><p>这充分说明了人们只愿意听到自己想听的内容，同样的消息看空的人认为是利空，看多的人则认为是利多。</p></blockquote><p><strong>我不是经济学家，这些似是而非的问题也不是三言两语能说清楚的。但我知道人性的弱点：当人们在为「黄金十年」找论据时，市场离见顶不远了；当人们在为长期的悲观寻找理由时，市场已经在底部区域了。投资者的悲哀，永远是轻易放弃和错误的坚持。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;投资中最简单的事&quot;&gt;&lt;a href=&quot;#投资中最简单的事&quot; class=&quot;headerlink&quot; title=&quot;投资中最简单的事&quot;&gt;&lt;/a&gt;投资中最简单的事&lt;/h1&gt;&lt;h6 id=&quot;邱国鹭&quot;&gt;&lt;a href=&quot;#邱国鹭&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://amaork.me/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="投资" scheme="http://amaork.me/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>SQLite 常用操作</title>
    <link href="http://amaork.me/2018/05/25/SQLite-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://amaork.me/2018/05/25/SQLite-常用操作/</id>
    <published>2018-05-25T14:45:21.000Z</published>
    <updated>2018-06-09T11:28:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎</p><h2 id="一、SQLite-数据类型"><a href="#一、SQLite-数据类型" class="headerlink" title="一、SQLite 数据类型"></a>一、SQLite 数据类型</h2><p>SQLite 支持 5 种数据类型，如下：</p><table><thead><tr><th>存储类型</th><th>描述</th></tr></thead><tbody><tr><td>NULL</td><td>值是一个 NULL 值。</td></tr><tr><td>INTEGER</td><td>值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td>REAL</td><td>值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td>TEXT</td><td>值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td>BLOB</td><td>值是一个 blob 数据，完全根据它的输入存储。</td></tr></tbody></table><p>前几种都是常见的数据类型，BLOB 可以存储自定义数据，比如图像数据、列表、时间对象等等。</p><h2 id="二、SQLite-数据表操作"><a href="#二、SQLite-数据表操作" class="headerlink" title="二、SQLite 数据表操作"></a>二、SQLite 数据表操作</h2><h3 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h3><p>SQLite 创建表的语法为： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLE_NAME(</span><br><span class="line">    column1 datatype [PRIMARY <span class="keyword">KEY</span>] [<span class="keyword">NOT</span> <span class="literal">NULL</span>] [<span class="keyword">DEFAULT</span>] [<span class="keyword">CHECK</span>] [<span class="keyword">UNIQUE</span>],</span><br><span class="line">    column2 datatype,</span><br><span class="line">    column3 datatype,</span><br><span class="line">    ...</span><br><span class="line">    columnN datatype</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中 <code>column1 - N</code> 为列的名称，例如编号、名字、年龄等等，<code>datatype</code> 为该列数据的数据类型，为 TEXT、INTEGER、REAL、BLOB 中的一种。列名和列数据类型，这两个是必选的，也就是创建一个列必须要有这些信息。</p><p>后面跟随的 <code>PRIMARY KEY</code>、<code>NOT NULL</code>、<code>DEFAULT</code>、<code>CHECK</code>、<code>UNIQUE</code> 等都是该列数据上执行的强制规则即约束，是可选的。这些约束用来检查插入到该列的数据，是否是符合规则的，以保证数据的的准确性和可靠性。其含义分别如下：</p><table><thead><tr><th>约束</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键，用来唯一标示数据库表中的各行记录</td><td>编号 INTEGER PRIMARY KEY</td></tr><tr><td>NOT NULL</td><td>确保该列数据不能有 NULL 值</td><td>年龄 INTEGER NOT NULL</td></tr><tr><td>DEFAULT</td><td>当该列没有制定值时为该列提供默认值</td><td>薪水 INTEGER DEFAULT 5000</td></tr><tr><td>UNIQUE</td><td>确保该列中所有值时不同的</td><td>ID INTEGER UNIQUE</td></tr><tr><td>CHECK</td><td>用来检查该列中的所有值满足某些条件</td><td>性别 TEXT CHECK(性别 in (“男”, “女”)</td></tr></tbody></table><p>另外如果列的数据类型为 <code>INTEGER</code> 还可以使用 <code>AUTOINCREMENT</code> 关键字，实现该字段值的自动增加。不过 <code>AUTOINCREMENT</code> 关键字除了要求列的数据类型为 <code>INTEGER</code> 外，还要求该列必须是主键即有 <code>PRIMARY KEY</code> 约束，两者必须配合使用。另外在插入数据到数据表的时候不要指定该列，即可实现字段的自动增加，详细请参考 3.1 节。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 员工(</span><br><span class="line">    编号 <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT,</span><br><span class="line">    姓名 <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    性别 <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span>(性别 <span class="keyword">IN</span> (<span class="string">"男"</span>,<span class="string">"女"</span>)),</span><br><span class="line">    年龄 <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    薪水 <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">5000</span>,</span><br><span class="line">    工号 <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    图像 <span class="built_in">BLOB</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2、删除表"><a href="#2、删除表" class="headerlink" title="2、删除表"></a>2、删除表</h3><p>删除表的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 员工;</span><br></pre></td></tr></table></figure><h2 id="三、SQLite-数据行操作"><a href="#三、SQLite-数据行操作" class="headerlink" title="三、SQLite 数据行操作"></a>三、SQLite 数据行操作</h2><h3 id="1、添加数据行"><a href="#1、添加数据行" class="headerlink" title="1、添加数据行"></a>1、添加数据行</h3><p>创建了表之后就可以向表中添加数据了，每条数据都成为表中的一行，其中包含了创建表时制定的各列的数据。添加数据行的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLE_NAME [(column1, column2, column3,...columnN)]</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, .... valueN);</span><br></pre></td></tr></table></figure><p>添加数据行时可以选择指定要添加的列名称，然后 在<code>VALUE</code> 中的值要与指定的列一一对应。这种情况通常用忽略有默认值、可以为 NULL、以及有 <code>AUTOINCREMENT</code> 关键字的行。如果不指定列的名称那么 <code>VALUE</code> 的值必须与列在表中的顺序一一对应。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 员工 <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">"张三"</span>, <span class="string">"男"</span>,  <span class="number">32</span>, <span class="number">5000</span>, <span class="number">18001</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 员工(姓名, 性别, 年龄, 工号) <span class="keyword">VALUES</span>(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">32</span>, <span class="number">18001</span>);</span><br></pre></td></tr></table></figure><p>以上两个语句是等效的，第一个语句没有指明列名，因此需要按照顺序来排列 <code>VALUE</code> 值。第二个插入语句忽略了编号、薪水、图像，编号具有 <code>AUTOINCREMENT</code> 关键字，如果不指定会自动增加，而薪水有 <code>DEFAULT</code> 约束如果没有指定值的话则使用默认值 5000，图像没有 <code>NOT NULL</code> 约束因为可以为 NULL。 </p><p>对于 <code>BLOB</code> 类型的数据插入以 Python 为例通过一下方法进行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open avatar file and read</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"avatar.png"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    avatar = fp.read()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Open sqlite database</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Insert a record with blob data</span></span><br><span class="line">cursor.execute(<span class="string">"INSERT INTO 员工 ('姓名', '性别', '年龄', '工号', '图像')"</span></span><br><span class="line">               <span class="string">"VALUES ('张三', '男', 32, 18001, ?)"</span>, [sqlite3.Binary(avatar)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Commit save</span></span><br><span class="line">conn.commit()</span><br><span class="line">coon.close()</span><br></pre></td></tr></table></figure><h3 id="2、更新数据行"><a href="#2、更新数据行" class="headerlink" title="2、更新数据行"></a>2、更新数据行</h3><p>添加了数据行之后，如果需要更新数据行则需要使用 <code>UPDATE</code> 语句，语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> TABLE_NAME</span><br><span class="line"><span class="keyword">SET</span> column1 = value1,  column2 = value2 ...., columnN = valueN</span><br><span class="line"><span class="keyword">WHERE</span> [condition];</span><br></pre></td></tr></table></figure><p>更新语句需要指定要更新那些列的数据，以「列名=值」的方式方式进行更新，同时还可以设置更新操作的条件即 <code>WHERE</code> 语句后面跟随的条件，如果不指明条件则会更新表中所有的列数据。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 员工 <span class="keyword">SET</span> 薪水=<span class="number">8000</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> 员工 <span class="keyword">SET</span> 薪水=<span class="number">8000</span> <span class="keyword">WHERE</span> 姓名=<span class="string">"张三"</span>;</span><br></pre></td></tr></table></figure><p>第一条语句没有指定条件，所以表中所有员工的薪水都将统一调整为 8000，第二条语句指定了条件 「姓名=”张三”」所以只有张三的薪水调整为 8000，而其他的员工则不影响。</p><h3 id="3、删除数据行"><a href="#3、删除数据行" class="headerlink" title="3、删除数据行"></a>3、删除数据行</h3><p>删除数据行的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> [condition];</span><br></pre></td></tr></table></figure><p>注意：<strong>和更新语句类似，如果没有指定删除的条件，则会删除所有的数据行即清空数据表。</strong></p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 员工;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 员工 <span class="keyword">WHERE</span> 工号=<span class="number">18001</span>;</span><br></pre></td></tr></table></figure><p>第一条语句是删除员工表中所有的数据，即清空员工表。第二条语句则是删除工号为 18001 的员工。</p><h3 id="4、选择数据行"><a href="#4、选择数据行" class="headerlink" title="4、选择数据行"></a>4、选择数据行</h3><p>选择数据行可能是 SQLite 中最常用的操作，当建好数据表并存储了数据之后，就需要从数据库中筛选数据了，使用 <code>SELECT</code> 语句来筛选数据了，其语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ... columnN</span><br><span class="line"><span class="keyword">FROM</span> TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> [condition];</span><br></pre></td></tr></table></figure><p><code>SELECT</code> 语句可以从数据表中获取指定的列，并指定相关的条件来筛选数据。例如获取性别为男的所有员工的薪水、获取所有女员工的年龄等等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有员工信息</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 员工;</span><br><span class="line"></span><br><span class="line"># 列出所有员工的姓名和年龄信息</span><br><span class="line"><span class="keyword">SELECT</span> 姓名, 年龄 <span class="keyword">FROM</span> 员工;</span><br><span class="line"></span><br><span class="line"># 列出所有男员工的姓名和薪水</span><br><span class="line"><span class="keyword">SELECT</span> 姓名, 薪水 <span class="keyword">FROM</span> 员工 <span class="keyword">WHERE</span> 性别=<span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"># 列出所有姓张的男性员工的姓名、年龄和薪水</span><br><span class="line"><span class="keyword">SELECT</span> 姓名, 年龄, 薪水 <span class="keyword">FROM</span> 员工 <span class="keyword">WHERE</span> 姓名 GLOB <span class="string">"张*"</span>;</span><br><span class="line"></span><br><span class="line"># 列出所有年龄大于 25 岁的女员工的姓名、年龄和薪水 </span><br><span class="line"><span class="keyword">SELECT</span> 姓名, 年龄, 薪水 <span class="keyword">FROM</span> 员工 <span class="keyword">WHERE</span> 性别=<span class="string">"女"</span> <span class="keyword">AND</span> 年龄 &gt; <span class="number">25</span>;</span><br></pre></td></tr></table></figure><h2 id="四、SQLite-其他杂项操作"><a href="#四、SQLite-其他杂项操作" class="headerlink" title="四、SQLite 其他杂项操作"></a>四、SQLite 其他杂项操作</h2><h3 id="1、获取数据库中所有的表"><a href="#1、获取数据库中所有的表" class="headerlink" title="1、获取数据库中所有的表"></a>1、获取数据库中所有的表</h3><p>在 SQLite 中可以使用 <code>.tables</code> 指令获取数据库所有表的名称, 也可以使用 <code>SELECT</code> 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.tables </span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> sqlite_master <span class="keyword">WHERE</span> <span class="keyword">type</span>=<span class="string">"table"</span> <span class="keyword">AND</span> <span class="keyword">name</span> != <span class="string">"sqlite_sequence"</span>;</span><br></pre></td></tr></table></figure><h3 id="2、获取数据表的-Schema-信息"><a href="#2、获取数据表的-Schema-信息" class="headerlink" title="2、获取数据表的 Schema 信息"></a>2、获取数据表的 Schema 信息</h3><p>在 SQLite 中可以使用 <code>.schema</code> 指令获取指定数据表的纲要信息，也可以使用 <code>PRAGMA</code> 语句来获取表的纲要信息，语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.schema 员工</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line"><span class="keyword">PRAGMA</span> table_info(员工);</span><br></pre></td></tr></table></figure><p>使用 <code>.schema</code> 列出表的信息是创建数据表时的 <code>CREATE</code> 语句的原始内容，比较适合人阅读，如果使用程序来解析，<code>PRAGMA</code> 则更为合适。其列出的内容是一个 6 列 N 行的数据表，每一行代表数据表中每一列的属性，其中包含列编号（cid）、列名称（name）、列数据类型（type）、不能为空（notnull）、默认值（dflt_value）、是否是主键值（pk）等。</p><p>例如，在 2.1 中创建的「员工」表列出的表信息如下：</p><table><thead><tr><th>cid</th><th>name</th><th>type</th><th>notnull</th><th>dflt_value</th><th>pk</th></tr></thead><tbody><tr><td>0</td><td>编号</td><td>INTEGER</td><td>1</td><td></td><td>1</td></tr><tr><td>1</td><td>姓名</td><td>TEXT</td><td>1</td><td></td><td>0</td></tr><tr><td>2</td><td>性别</td><td>TEXT</td><td>1</td><td></td><td>0</td></tr><tr><td>3</td><td>年龄</td><td>INTEGER</td><td>1</td><td></td><td>0</td></tr><tr><td>4</td><td>薪水</td><td>INTEGER</td><td>1</td><td>5000</td><td>0</td></tr><tr><td>5</td><td>工号</td><td>INTEGER</td><td>1</td><td></td><td>0</td></tr><tr><td>6</td><td>头像</td><td>BLOB</td><td>0</td><td></td><td>0</td></tr></tbody></table><h2 id="五、使用-Python-接口操作-SQLite"><a href="#五、使用-Python-接口操作-SQLite" class="headerlink" title="五、使用 Python 接口操作 SQLite"></a>五、使用 Python 接口操作 SQLite</h2><p>Python 可以使用 <code>sqlite3</code> 模块来操作 SQLite, 其集成了一个 DB-API 2.0 规范兼容的 SQL 接口，该模块在 Python 的标准库，可直接调来使用。其常用操作如下：</p><h3 id="1、打开-链接数据库、创建-cursor"><a href="#1、打开-链接数据库、创建-cursor" class="headerlink" title="1、打开/链接数据库、创建 cursor"></a>1、打开/链接数据库、创建 cursor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">cursor = conn.cursor()</span><br></pre></td></tr></table></figure><h3 id="2、执行-SQL-语句获取执行结果"><a href="#2、执行-SQL-语句获取执行结果" class="headerlink" title="2、执行 SQL 语句获取执行结果"></a>2、执行 SQL 语句获取执行结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">"SELECT * FROM 员工;"</span>)</span><br><span class="line">records = cursor.fetchall()</span><br></pre></td></tr></table></figure><h3 id="3、提交数据关闭"><a href="#3、提交数据关闭" class="headerlink" title="3、提交数据关闭"></a>3、提交数据关闭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>更多的操作可以参考我的 <a href="https://github.com/amaork/PyAppFramework" target="_blank" rel="noopener">PyAppFramework</a> 仓库中 <a href="https://github.com/amaork/PyAppFramework/blob/master/core/database.py" target="_blank" rel="noopener">SQLiteDatabase 模块</a>。其提供了 SQLite 常用操作的简单封装，如：获取数据库所有表名称、获取数据表信息、获取数据表列名称、获取数据表 PRIMARY KEY、获取表的所有数据、创建表、删除表、插入数据列、更新数据列、删除数据列、刷选数据等操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SQLite 是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎&lt;/p&gt;
&lt;h2 id=&quot;一、SQLite-数据类型&quot;&gt;&lt;a href=&quot;#一、SQLite-数据类型&quot; class=&quot;headerlink&quot; title=&quot;一、SQLite 数
      
    
    </summary>
    
      <category term="技术分享" scheme="http://amaork.me/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="SQLite" scheme="http://amaork.me/tags/SQLite/"/>
    
      <category term="Python" scheme="http://amaork.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>用 GIMP 制作透明图标</title>
    <link href="http://amaork.me/2018/05/11/%E7%94%A8-GIMP-%E5%88%B6%E4%BD%9C%E9%80%8F%E6%98%8E%E5%9B%BE%E6%A0%87/"/>
    <id>http://amaork.me/2018/05/11/用-GIMP-制作透明图标/</id>
    <published>2018-05-11T15:09:28.000Z</published>
    <updated>2018-06-04T15:08:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一个的 Qt 项目，需要放置一些图标按钮在工具栏上，让这些图标的背景变透明，然后更改工具栏的背景来实现一些效果。在网上找了一些素材用，但有些素材的背景是白色的而不是透明的，就需要有工具把白色的背景替换为透明的。使用 GMIP 制作的的过程非常简单：</p><h3 id="一、打开图标"><a href="#一、打开图标" class="headerlink" title="一、打开图标"></a>一、打开图标</h3><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-12 00.02.14.png" alt="屏幕快照 2018-05-12 00.02.14"></p><h3 id="二、添加透明图层"><a href="#二、添加透明图层" class="headerlink" title="二、添加透明图层"></a>二、添加透明图层</h3><p>在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 添加透明通道 (Add Alpha Channel) 如果透明通道已存在，可以省略该步骤。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-11 23.36.14.png" alt="屏幕快照 2018-05-11 23.36.14"></p><h3 id="三、选取背景颜色"><a href="#三、选取背景颜色" class="headerlink" title="三、选取背景颜色"></a>三、选取背景颜色</h3><p>点「吸管」工具，选中想要变透明的背景的颜色。将背景颜色的值复制下来，即下图红框中的值。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/WX20180512-000510.png" alt="WX20180512-000510"></p><h3 id="四、背景颜色到透明"><a href="#四、背景颜色到透明" class="headerlink" title="四、背景颜色到透明"></a>四、背景颜色到透明</h3><p>在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 颜色到透明 (Color to Alpha)。在弹出的对话框中，点来自（From）,然后在弹出的颜色到透明对话框中，粘贴上一步通过吸管获取的背景的颜色，点确定，然后开始转换。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/WX20180512-000548.png" alt="WX20180512-000548"></p><h3 id="五、保存透明图标"><a href="#五、保存透明图标" class="headerlink" title="五、保存透明图标"></a>五、保存透明图标</h3><p>经过以上几步操作后，蓝色背景的图标就变成了透明图标，如下图所示。最后需要将图标导出，<strong>需要注意：只有 PNG 和 GIF 格式的图片支持透明通道，推荐 PNG 格式。</strong></p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-12 00.21.09.png" alt="屏幕快照 2018-05-12 00.21.09"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做一个的 Qt 项目，需要放置一些图标按钮在工具栏上，让这些图标的背景变透明，然后更改工具栏的背景来实现一些效果。在网上找了一些素材用，但有些素材的背景是白色的而不是透明的，就需要有工具把白色的背景替换为透明的。使用 GMIP 制作的的过程非常简单：&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="杂项" scheme="http://amaork.me/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 年度读书总结</title>
    <link href="http://amaork.me/2018/01/07/2017-%E5%B9%B4%E5%BA%A6%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://amaork.me/2018/01/07/2017-年度读书总结/</id>
    <published>2018-01-07T08:39:46.000Z</published>
    <updated>2018-05-26T16:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017年，我总共读了 80 本书，为 45 本书做了读书笔记。书目主要集中在投资理财、思维方式训练、小说散文以及中国古代财政政策方面。读书时间主要集中在早晚上下班地铁中，以及晚饭后到睡觉前的这段时间，周末也有读，但效率不是很高，周末在家中有太多干扰阅读的事情。这些书中只有两本是纸质书，我现在买书的原则是：有电子版就买电子版，没有电子版的时候才考虑纸质书，一方面是电子书比较方便在地铁中阅读，另外一方面是因为搬家的时候纸质书真的是太重了！！！</p><p>书目如下，书名加粗的是我比较推荐的，推荐的理由是这些书给我带来了新的技能、新的认知，能让我以不同的视角了解事情，或者是这些书读起来让我感觉轻松愉快（是的，推荐的理由就是这么简单粗暴:D）。以下分类是我按照自己的理解分类的，不是很严谨：</p><h3 id="一、投资理财"><a href="#一、投资理财" class="headerlink" title="一、投资理财"></a>一、投资理财</h3><ul><li>不炒股只投基，低风险赚出高收益</li><li>傻瓜式投资</li><li>治富</li><li>财务是个真实的谎言</li><li><strong>小狗钱钱</strong></li><li>指数基金投资指南（雪球）</li><li><strong>指数基金投资指南</strong></li><li>解读基金：我的投资观与实践</li><li>业余投资者的十条军规</li><li>银行行长不轻易说的理财经</li><li><strong>富爸爸，穷爸爸</strong>（重读）</li><li>富爸爸，点石成金</li><li>富爸爸，21世纪的生意</li><li>富爸爸，商学院</li><li><strong>邓普顿教你逆向投资</strong></li></ul><h3 id="二、思维方式"><a href="#二、思维方式" class="headerlink" title="二、思维方式"></a>二、思维方式</h3><ul><li>拆掉思维里的墙</li><li>认知盈余</li><li><strong>巴菲特之道</strong></li><li><strong>随机漫步的傻瓜</strong></li><li><strong>清醒思考的艺术</strong></li><li>明智行动的艺术</li><li>巴菲特传</li><li><strong>细节</strong></li><li><strong>超越智商：为什么聪明人也会做蠢事</strong></li><li>暗时间</li><li><strong>黑匣子思维</strong></li><li><strong>稀缺</strong></li><li><strong>先发影响力</strong>(影响力作者的第二部作品，影响力也很棒)</li><li><strong>穷查理宝典</strong></li></ul><h3 id="三、小说散文"><a href="#三、小说散文" class="headerlink" title="三、小说散文"></a>三、小说散文</h3><ul><li>鱼王</li><li>阴兽</li><li>人间椅子</li><li>风起陇西</li><li><strong>平民之宴</strong></li><li>哈利波特</li><li><strong>美国众神</strong></li><li><strong>冰与火之歌</strong>（15 年买的书 17 年看完，惭愧）</li><li><strong>碟形世界：猫和少年魔笛手</strong></li><li>这些人，那些事</li><li>有时</li><li><strong>阿勒泰的角落</strong></li><li>走夜路请放声唱歌</li><li><strong>1984</strong></li><li>三毛流浪记</li></ul><h3 id="四、其他分类"><a href="#四、其他分类" class="headerlink" title="四、其他分类"></a>四、其他分类</h3><ul><li>哈佛评论：乔布斯的管理课程</li><li>你为什么是穷人</li><li><strong>哲学家们都干了些什么</strong></li><li>未来世界的幸存者（阮一峰博客）</li><li>如何科学地学英语</li><li>谈美</li><li>谈修养</li><li>人类砍头小史</li><li>大空头</li><li>创业就是要细分垄断</li><li>90秒抵达安全</li><li>跟任何人都聊得来</li><li>小顾聊神话</li><li>史家高华</li><li>那些古怪又让人忧心的问题</li><li>电影品格</li><li>我是评香师</li><li>认同感：用故事包装事实的艺术</li><li>一小时外</li><li>中国人的气质</li><li><strong>民主的细节</strong></li><li><strong>观念的水位</strong></li><li>马伯庸笑翻中国史</li><li>只有偏执狂才能生存</li><li>极简主义</li><li>睡眠革命</li><li><strong>巨富</strong></li><li>枪炮、病菌与钢铁</li><li>品牌洗脑</li><li>身份的焦虑</li><li>极简人类史</li><li>说中国</li><li><strong>血酬定律</strong></li><li><strong>大国大城</strong></li><li><strong>中央帝国的财政密码</strong></li><li><strong>历代中国经济变革得失</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017年，我总共读了 80 本书，为 45 本书做了读书笔记。书目主要集中在投资理财、思维方式训练、小说散文以及中国古代财政政策方面。读书时间主要集中在早晚上下班地铁中，以及晚饭后到睡觉前的这段时间，周末也有读，但效率不是很高，周末在家中有太多干扰阅读的事情。这些书中只有
      
    
    </summary>
    
      <category term="总结" scheme="http://amaork.me/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS Workflow 初体验</title>
    <link href="http://amaork.me/2017/11/05/iOS-Workflow-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://amaork.me/2017/11/05/iOS-Workflow-初体验/</id>
    <published>2017-11-05T08:09:02.000Z</published>
    <updated>2018-05-26T09:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Workflow-介绍"><a href="#Workflow-介绍" class="headerlink" title="Workflow 介绍"></a>Workflow 介绍</h3><p>前阵子某电商 iPhone 8 大降价，就趁机入手了一个，用了 3 年的 5S 终于退役了。之前用的是 iOS 8,升级到 iOS 11 之后感觉变化还是很大的。让我觉得比较新颖的是 <a href="https://itunes.apple.com/app/workflow-powerful-automation/id915249334" target="_blank" rel="noopener">Workflow</a> 这个应用（虽然这个应用早就出来了，之前从来没有用过），其主要功能是将一系列操作整合到一起，然后一键自动执行，用来提高效率，比如一键分享图片到各个社交平台。</p><p>当然，它有各种各样的用法，就看你的需求和想象力了。其内置了一系列操作称之为 「Action」。你可以根据你的需要，把各种「Action」组合起来，形成一个「Workflow」，然后一键执行。看了几个例子和帮助文档之后，我决定自己做一个试试。</p><h3 id="Air-Quality-Index-制作思路"><a href="#Air-Quality-Index-制作思路" class="headerlink" title="Air Quality Index 制作思路"></a>Air Quality Index 制作思路</h3><p>在 macOS 有个很著名的应用 「Alfred」,其内部也支持 Workflow，其中有一个查询空气质量的 Workflow, 我决定先仿照这个来一个。其大概工作流程是：</p><div id="flowchart-0" class="flow-chart"></div><p>首先需要去 <a href="http://www.pm25.in/api_doc" target="_blank" rel="noopener">PM25.IN</a> 了解一下查询控制质量 API 的使用，要想查询空气质量，需要一个 PM25.IN 的 AppKey。为了简便起见，就没有申请新的 AppKey，使用其公共测试 AppKey，以后正常使用的时候，最好单独申请一个属于自己的 AppKey。</p><p>得到 AppKey 之后，通过<code>http://www.pm25.in/api/querys/pm2_5.json</code>这个接口去获取空气质量数据，调用方法，参照其文档：</p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2017-11-05 17.32.48.png" alt="屏幕快照 2017-11-05 17.32.48"></p><p>我们至少需要传递一个参数，即城市的名称，然后这个 API 回返回一个数组，数组中的每个项都是一个字典，代表这个城市一个检测点的数据，我们关心的数据有，监测点名称（position_name）、空气质量（quality）、空气质量指数（aqi）、PM2.5 颗粒小时平均值（pm2_5）等参数。</p><p>了解了这些之后就可以动手做了，从一个程序员的角度来看「Workflow」类似一种图形化的编程工具，其提供了<code>Scripting</code>类似一种图形化的编程语言。通过它你可以给变量赋值、获取变量值、流控制、循环控制、处理列表，字典等数据等。其他的功能类似于其他编程语言中的库，你可以通过这些库，获得设备的信息、或者对图像进行处理、发起 HTTP 请求等等，最终通过「Alert」、「Notification」、「Vibrate」、「Play Sound」、「Speak Text」等表现方式 ,将处理后的结果输出。</p><p><strong>需要注意的是，每个「Action」都有一个输入和输出，上一个「Action」的输出，默认会成为下一个「Action」的输入，在有些地方需要将数据保存到变量中，以免被覆盖，在后面使用的时候，再取出来。更详细的文档说明参考 <a href="https://workflow.is/docs" target="_blank" rel="noopener">Workflow Documentation</a>.</strong></p><h3 id="Air-Quality-Index-使用说明"><a href="#Air-Quality-Index-使用说明" class="headerlink" title="Air Quality Index 使用说明"></a>Air Quality Index 使用说明</h3><p>可以从 <a href="https://workflow.is/workflows/5b9d983524ca4c7587ad110ff9b7a5ec" target="_blank" rel="noopener">Air Quality Index</a>  下载我做的查询空气质量 Workflow，在使用的时候，替换你在 <a href="http://www.pm25.in/api_doc" target="_blank" rel="noopener">PM25.IN</a> 中申请的 AppKey, 替换位置如下截图中的<code>Text</code>中的值（默认使用的是 PM25.in 公共测试 AppKey）</p><p><img src="http://oy6j734fq.bkt.clouddn.com/aqi_appkey.jpeg" alt="aqi_appkey"></p><p>然后，根据自己的使用情况，将经常查询的城市，加入到如下截图所示的<code>List</code>中，这样就可以快速查询这个城市的空气质量情况</p><p><img src="http://oy6j734fq.bkt.clouddn.com/aqi_input.jpeg" alt="aqi_input"></p><p>最终运行效果如下：</p><p><img src="http://oy6j734fq.bkt.clouddn.com/air_quality_index_workflow.gif" alt="air_quality_index_workflow"></p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始e=>end: 结束op_input=>operation: 获取城市名称op_get_aqi=>operation: 向「PM25.in」查询空气质量数据op_data_proc=>operation: 对返回数据解析处理，进行格式化op_show_data=>operation: 展示查询城市的空气质量st->op_input->op_get_aqi->op_data_proc->op_show_data->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Workflow-介绍&quot;&gt;&lt;a href=&quot;#Workflow-介绍&quot; class=&quot;headerlink&quot; title=&quot;Workflow 介绍&quot;&gt;&lt;/a&gt;Workflow 介绍&lt;/h3&gt;&lt;p&gt;前阵子某电商 iPhone 8 大降价，就趁机入手了一个，用了 3 
      
    
    </summary>
    
      <category term="技术分享" scheme="http://amaork.me/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="iOS Workflow" scheme="http://amaork.me/tags/iOS-Workflow/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 绑定二级域名</title>
    <link href="http://amaork.me/2017/10/28/Hexo-%E7%BB%91%E5%AE%9A%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
    <id>http://amaork.me/2017/10/28/Hexo-绑定二级域名/</id>
    <published>2017-10-28T13:25:09.000Z</published>
    <updated>2018-05-26T09:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周末把 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 摸索了一遍，部署在了 Github Pages 上，详细过程就不多说了，网上有很多教程。今天要讲讲，如何绑定二级域名。</p><ol><li>首先你需要有一个域名，可以到<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>或国外的<a href="https://sg.godaddy.com/zh/" target="_blank" rel="noopener">Godaddy</a>购买</li><li>在域名供应商提供的域名解析服务中添加一条 <code>CNAME</code> 记录，指向你博客的 Github Pages 地址例如<code>blog.yourdomain.xxx -&gt; yourname.github.io</code></li><li>在博客目录的 <code>source</code> 目录中添加一个名称为 <code>CNAME</code> 的文件，文件中存放你第二部 <code>CNAME</code> 中添加的域名例如：<code>blog.yourdomain.xxx</code></li><li>打开 Github 存放你博客仓库的设置菜单，找到 Custom domain, 填入你的博客地址，保存</li><li>重新部署到 Github Pages</li></ol><p>经过以上几步，这样当你通过二级域名 <code>blog.yourdomain.xxx</code> 访问博客的时候，经过域名服务器的映射就自动跳转到了 Github Pages 地址。<strong>注意：域名记录的生效需要花费时间，通常不会超过 72 小时</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周末把 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 摸索了一遍，部署在了 Github Pages 上，详细过程就不多说了，网上有很多教程。今天要讲讲，如何绑定二级域名。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://amaork.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的读书笔记变迁史</title>
    <link href="http://amaork.me/2017/10/28/%E6%88%91%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%8F%98%E8%BF%81%E5%8F%B2/"/>
    <id>http://amaork.me/2017/10/28/我的读书笔记变迁史/</id>
    <published>2017-10-28T06:19:54.000Z</published>
    <updated>2018-05-26T16:42:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>我读书素来有整理笔记的习惯，总觉得读了一本书之后，不把书中的思想要点和自己的理解，以笔记的形式记录下来，就会很快忘掉。整理读书笔记是个很繁琐的事情，当然，整理读书笔记还是有很多好处的。比如说可以方便地进行定期回顾，加深自己的理解、日后查找资料的时候可以快速检索、可以把当时自己的想法记录下来供日后参考，另外还有增强自己成就感的好处，看着自己整理下来一篇篇的读书笔记，还是很有成就感的。</p><p>在使用 Kindle 之前，我所有的读书笔记都是在<a href="https://book.douban.com/" target="_blank" rel="noopener">豆瓣读书</a>中整理的，那还是 iPhone 4S 时代，豆瓣推出了一个「豆瓣笔记」的手机应用 （不是现在的「豆瓣阅读」）, 可以在那个应用中整理笔记。只需要填写章节的名称、页码，可以摘抄书中的内容，然后在后面附上自己的读书心得，也可以加照片作为附件，刚好满足了我的需求。然后就一直用了下来，我在「豆瓣笔记」中整理了 19 本书 227 条笔记。可惜好景不长，在豆瓣推出自己的电子书业务「豆瓣阅读」后，就把「豆瓣笔记」这条线给砍了，软件不再更新，后来我换手机之后，就没有继续在那「豆瓣笔记」中整理笔记了。</p><p>这中间还有一段小插曲，任何东西刚推出，需要拓展客户的时候都是很给力的，「豆瓣阅读」也不例外，我记得当时充值很优惠，好像是充 50 当 100 用，记不清楚了。「豆瓣阅读」刚推出的时候，亚马逊的 Kindle 系列电子书还没有正式进入中国，可以在淘宝上买国外的用，不过只能自己复制书进去看，不能在线购买。我尝试「豆瓣阅读」另外一个原因是，它可以把你买的电子书转换成适合 Kindle 6 寸屏的 PDF，然后通过邮件推送给你。不过这个服务也很快就停止运营了，原因是 Kindle 正式在国内上线了。对于喜欢阅读的我，当然是毫不犹豫的来了一个，这就是 Kindle Paperwhite 一代，自此上了亚马逊的船至今。</p><p>经历了「豆瓣笔记」停止更新事件之后，我又尝试了其他的一些服务，比如在 Evernote、OneNote 上整理笔记，不过都不太理想。这些平台虽然可以同步，但都不支持 Markdown 语法，而且内容放在别人平台上很不放心，谁知道将来这些平台什么时候停止运营呢，即便在停止运营前可以把你的内容导出，但自己还要二次处理，还是很麻烦的。</p><p>「豆瓣笔记」停止更新后，我就把自己的读书笔记导出来了，导出为 XML 格式。后来自己用 <a href="http://www.grinninglizard.com/tinyxml2/" target="_blank" rel="noopener">TinyXML2</a> 写了一个 C++ 命令行小程序 <a href="https://github.com/amaork/doubanNote2Markdown" target="_blank" rel="noopener">doubanNote2Markdown</a> 把「豆瓣读书」的导出的 xml 文件转换成 Markdown 格式。说实话写的很粗糙，那会儿还没有用 Python 呢，要不用 Python 干这事儿简直太轻松，说不定还能上界面呢。总之，它圆满地完成了任务，我也就没再管它了。转换后的效果如下：</p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2017-10-28 16.59.39.png" alt="屏幕快照 2017-10-28 16.59.39"></p><p>几经折腾，我发现整理笔记最合适的方式是，将笔记整理成使用 Markdown 语法的文本文件，然后通过某种服务，同步管理这些文件。首先想到的是各种网盘，可惜最好用的 Dropbox 在国内早就不能用了。国内的几家网盘提供商，说实话我不太信任，自己的东西可能随时被删掉。所以个人觉得最稳妥的方法是使用 Git 来管理。如果读书笔记的内容不是私密的，可以在 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 中新建一个仓库来管理，如果是私密的，可以存放在自己私有的 Git 服务器上。我目前就是这样做的，当然不是为了存放读书笔记专门建立的 Git 服务器，而是兼用。</p><p>这样做优点就不用说了，说说缺点吧，缺点就是在移动设备上查看的时候，不是很方便。我目前的解决方案是，定期把这些读书笔记整理成 PDF 这样就可以在各种设备上查看了。现在有各种各样的 Markdown 编辑器，可以把 Markdown 转换为 PDF 或 HTML 甚至可以生成静态网站，我目前用的是 <a href="http://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a>，感觉不错，而且支持<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛</a>做图床 (MWeb 看到了，请给我打广告费(^_^))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我读书素来有整理笔记的习惯，总觉得读了一本书之后，不把书中的思想要点和自己的理解，以笔记的形式记录下来，就会很快忘掉。整理读书笔记是个很繁琐的事情，当然，整理读书笔记还是有很多好处的。比如说可以方便地进行定期回顾，加深自己的理解、日后查找资料的时候可以快速检索、可以把当时自
      
    
    </summary>
    
      <category term="随笔" scheme="http://amaork.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>博客正式上线</title>
    <link href="http://amaork.me/2017/10/21/%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%BC%8F%E4%B8%8A%E7%BA%BF/"/>
    <id>http://amaork.me/2017/10/21/博客正式上线/</id>
    <published>2017-10-21T13:58:11.000Z</published>
    <updated>2018-05-26T09:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>早在去年就有了写博客的想法，一方面，想把自己碎碎念的想法，和日常工作中遇到的问题和解决思路整理起来，好方便日后回顾。另外一方面，想借助互联网这个开放的平台，扩大自己的影响力，同时多结识志同道合的朋友。</p><p>去年的时候研究了一阵子 <a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> + <a href="http://getbootstrap.com/" target="_blank" rel="noopener">Bootstrap</a> + VPS 的方案，还做了几个 <a href="https://github.com/amaork/DjangoStudio" target="_blank" rel="noopener">Deom</a>。感觉用 <code>Django</code> 做个人博客有点儿大材小用，而且很多东西需要自己捣鼓，特别是 Markdown 渲染这块儿是比较头疼的，再后来因为有其他事情耽搁，就放下。</p><p>直到今年接触到了 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 这个平台，发现用它做个人博客真的是太合适不过了，就像它宣称的那样小巧、快捷、支持 Markdown 而且可以部署在 <code>Github</code> 上。于是，今天下午就花了一下午的时间把这个捣鼓上了。我是大学毕业后半路出家，搞嵌入式软件开发的，对前端这块，实在是一窍不通。好在有许多人把自己 <code>Hexo</code> 使用的主题分享出来了，要特别感谢 <a href="http://chaoo.oschina.io/" target="_blank" rel="noopener">@郑超</a> 我现在用的这个<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">主题</a>就是他做的。</p><p>总言之，我的博客上线啦，后续我会把这几年在工作中遇到的问题，和解决的思路整理出来，希望能帮助到别人，同时也可以加深自己的记忆和理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早在去年就有了写博客的想法，一方面，想把自己碎碎念的想法，和日常工作中遇到的问题和解决思路整理起来，好方便日后回顾。另外一方面，想借助互联网这个开放的平台，扩大自己的影响力，同时多结识志同道合的朋友。&lt;/p&gt;
&lt;p&gt;去年的时候研究了一阵子 &lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="随笔" scheme="http://amaork.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://amaork.me/2017/10/21/Test/"/>
    <id>http://amaork.me/2017/10/21/Test/</id>
    <published>2017-10-21T10:46:45.000Z</published>
    <updated>2018-05-26T09:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This-is-a-test-page"><a href="#This-is-a-test-page" class="headerlink" title="This is a test page"></a>This is a test page</h1><h4 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h4><blockquote><p>Life never gets easier, yor just get better.</p></blockquote><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><table><thead><tr><th>Header1</th><th>Header2</th></tr></thead><tbody><tr><td>cell1</td><td>cell2</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;This-is-a-test-page&quot;&gt;&lt;a href=&quot;#This-is-a-test-page&quot; class=&quot;headerlink&quot; title=&quot;This is a test page&quot;&gt;&lt;/a&gt;This is a test page&lt;/h1&gt;&lt;h4 i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://amaork.me/2017/10/21/hello-world/"/>
    <id>http://amaork.me/2017/10/21/hello-world/</id>
    <published>2017-10-21T10:36:45.000Z</published>
    <updated>2018-05-26T09:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
