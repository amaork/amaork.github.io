<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amaork&#39;s Blog</title>
  
  <subtitle>It never gets easier, you just get better.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://amaork.me/"/>
  <updated>2018-05-26T16:34:11.499Z</updated>
  <id>http://amaork.me/</id>
  
  <author>
    <name>amaork</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQLite 常用操作</title>
    <link href="http://amaork.me/2018/05/25/SQLite%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://amaork.me/2018/05/25/SQLite 常用操作/</id>
    <published>2018-05-25T14:45:21.000Z</published>
    <updated>2018-05-26T16:34:11.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SQLite-数据类型"><a href="#一、SQLite-数据类型" class="headerlink" title="一、SQLite 数据类型"></a>一、SQLite 数据类型</h2><p>SQLite 支持 5 种数据类型，如下：</p><table><thead><tr><th>存储类型</th><th>描述</th></tr></thead><tbody><tr><td>NULL</td><td>值是一个 NULL 值。</td></tr><tr><td>INTEGER</td><td>值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td>REAL</td><td>值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td>TEXT</td><td>值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td></tr><tr><td>BLOB</td><td>值是一个 blob 数据，完全根据它的输入存储。</td></tr></tbody></table><p>前几种都是常见的数据类型，BLOB 可以存储自定义数据，比如图像数据、列表、时间对象等等。</p><h2 id="二、SQLite-数据表操作"><a href="#二、SQLite-数据表操作" class="headerlink" title="二、SQLite 数据表操作"></a>二、SQLite 数据表操作</h2><h3 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h3><p>SQLite 创建表的语法为： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLE_NAME(</span><br><span class="line">    column1 datatype [PRIMARY <span class="keyword">KEY</span>] [<span class="keyword">NOT</span> <span class="literal">NULL</span>] [<span class="keyword">DEFAULT</span>] [<span class="keyword">CHECK</span>] [<span class="keyword">UNIQUE</span>],</span><br><span class="line">    column2 datatype,</span><br><span class="line">    column3 datatype,</span><br><span class="line">    ...</span><br><span class="line">    columnN datatype</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中 <code>column1 - N</code> 为列的名称，例如编号、名字、年龄等等，<code>datatype</code> 为该列数据的数据类型，为 TEXT、INTEGER、REAL、BLOB 中的一种。列名和列数据类型，这两个是必选的，也就是创建一个列必须要有这些信息。</p><p>后面跟随的 <code>PRIMARY KEY</code>、<code>NOT NULL</code>、<code>DEFAULT</code>、<code>CHECK</code>、<code>UNIQUE</code> 等都是该列数据上执行的强制规则即约束，是可选的。这些约束用来检查插入到该列的数据，是否是符合规则的，以保证数据的的准确性和可靠性。其含义分别如下：</p><table><thead><tr><th>约束</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键，用来唯一标示数据库表中的各行记录</td><td>编号 INTEGER PRIMARY KEY</td></tr><tr><td>NOT NULL</td><td>确保该列数据不能有 NULL 值</td><td>年龄 INTEGER NOT NULL</td></tr><tr><td>DEFAULT</td><td>当该列没有制定值时为该列提供默认值</td><td>薪水 INTEGER DEFAULT 5000</td></tr><tr><td>UNIQUE</td><td>确保该列中所有值时不同的</td><td>ID INTEGER UNIQUE</td></tr><tr><td>CHECK</td><td>用来检查该列中的所有值满足某些条件</td><td>性别 TEXT CHECK(性别 in (“男”, “女”)</td></tr></tbody></table><p>另外如果列的数据类型为 <code>INTEGER</code> 还可以使用 <code>AUTOINCREMENT</code> 关键字，实现该字段值的自动增加。不过 <code>AUTOINCREMENT</code> 关键字除了要求列的数据类型为 <code>INTEGER</code> 外，还要求该列必须是主键即有 <code>PRIMARY KEY</code> 约束，两者必须配合使用。另外在插入数据到数据表的时候不要指定该列，即可实现字段的自动增加，详细请参考 3.1 节。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 员工(</span><br><span class="line">    编号 <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT,</span><br><span class="line">    姓名 <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    性别 <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span>(性别 <span class="keyword">IN</span> (<span class="string">"男"</span>,<span class="string">"女"</span>)),</span><br><span class="line">    年龄 <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    薪水 <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">5000</span>,</span><br><span class="line">    工号 <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    图像 <span class="built_in">BLOB</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2、删除表"><a href="#2、删除表" class="headerlink" title="2、删除表"></a>2、删除表</h3><p>删除表的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 员工;</span><br></pre></td></tr></table></figure><h2 id="三、SQLite-数据行操作"><a href="#三、SQLite-数据行操作" class="headerlink" title="三、SQLite 数据行操作"></a>三、SQLite 数据行操作</h2><h3 id="1、添加数据行"><a href="#1、添加数据行" class="headerlink" title="1、添加数据行"></a>1、添加数据行</h3><p>创建了表之后就可以向表中添加数据了，每条数据都成为表中的一行，其中包含了创建表时制定的各列的数据。添加数据行的语法为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLE_NAME [(column1, column2, column3,...columnN)]</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, .... valueN);</span><br></pre></td></tr></table></figure><p>添加数据行时可以选择指定要添加的列名称，然后 在<code>VALUE</code> 中的值要与指定的列一一对应。这种情况通常用忽略有默认值、可以为 NULL、以及有 <code>AUTOINCREMENT</code> 关键字的行。如果不指定列的名称那么 <code>VALUE</code> 的值必须与列在表中的顺序一一对应。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 员工 <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">"张三"</span>, <span class="string">"男"</span>,  <span class="number">32</span>, <span class="number">5000</span>, <span class="number">18001</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 员工(姓名, 性别, 年龄, 工号) <span class="keyword">VALUES</span>(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">32</span>, <span class="number">18001</span>);</span><br></pre></td></tr></table></figure><p>以上两个语句是等效的，第一个语句没有指明列名，因此需要按照顺序来排列 <code>VALUE</code> 值。第二个插入语句忽略了编号、薪水、图像，编号具有 <code>AUTOINCREMENT</code> 关键字，如果不指定会自动增加，而薪水有 <code>DEFAULT</code> 约束如果没有指定值的话则使用默认值 5000，图像没有 <code>NOT NULL</code> 约束因为可以为 NULL。 </p><p>对于 <code>BLOB</code> 类型的数据插入以 Python 为例通过一下方法进行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Open avatar file and read</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"avatar.png"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    avatar = fp.read()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Open sqlite database</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Insert a record with blob data</span></span><br><span class="line">cursor.execute(<span class="string">"INSERT INTO 员工 ('姓名', '性别', '年龄', '工号', '图像')"</span></span><br><span class="line">               <span class="string">"VALUES ('张三', '男', 32, 18001, ?)"</span>, [sqlite3.Binary(avatar)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Commit save</span></span><br><span class="line">conn.commit()</span><br><span class="line">coon.close()</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### 2、更新数据行</span></span><br><span class="line"></span><br><span class="line">添加了数据行之后，如果需要更新数据行则需要使用 `UPDATE` 语句，语法如下：</span><br><span class="line"></span><br><span class="line">```SQL</span><br><span class="line">UPDATE TABLE_NAME</span><br><span class="line">SET column1 = value1,  column2 = value2 ...., columnN = valueN</span><br><span class="line">WHERE [condition];</span><br></pre></td></tr></table></figure><p>更新语句需要指定要更新那些列的数据，以「列名=值」的方式方式进行更新，同时还可以设置更新操作的条件即 <code>WHERE</code> 语句后面跟随的条件，如果不指明条件则会更新表中所有的列数据。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 员工 <span class="keyword">SET</span> 薪水=<span class="number">8000</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> 员工 <span class="keyword">SET</span> 薪水=<span class="number">8000</span> <span class="keyword">WHERE</span> 姓名=<span class="string">"张三"</span>;</span><br></pre></td></tr></table></figure><p>第一条语句没有指定条件，所以表中所有员工的薪水都将统一调整为 8000，第二条语句指定了条件 「姓名=”张三”」所以只有张三的薪水调整为 8000，而其他的员工则不影响。</p><h3 id="3、删除数据行"><a href="#3、删除数据行" class="headerlink" title="3、删除数据行"></a>3、删除数据行</h3><p>删除数据行的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> [condition];</span><br></pre></td></tr></table></figure><p>注意：<strong>和更新语句类似，如果没有指定删除的条件，则会删除所有的数据行即清空数据表。</strong></p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 员工;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 员工 <span class="keyword">WHERE</span> 工号=<span class="number">18001</span>;</span><br></pre></td></tr></table></figure><p>第一条语句是删除员工表中所有的数据，即清空员工表。第二条语句则是删除工号为 18001 的员工。</p><h3 id="4、选择数据行"><a href="#4、选择数据行" class="headerlink" title="4、选择数据行"></a>4、选择数据行</h3><p>选择数据行可能是 SQLite 中最常用的操作，当建好数据表并存储了数据之后，就需要从数据库中筛选数据了，使用 <code>SELECT</code> 语句来筛选数据了，其语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ... columnN</span><br><span class="line"><span class="keyword">FROM</span> TABLE_NAME</span><br><span class="line"><span class="keyword">WHERE</span> [condition];</span><br></pre></td></tr></table></figure><p><code>SELECT</code> 语句可以从数据表中获取指定的列，并指定相关的条件来筛选数据。例如获取性别为男的所有员工的薪水、获取所有女员工的年龄等等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有员工信息</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 员工;</span><br><span class="line"></span><br><span class="line"># 列出所有员工的姓名和年龄信息</span><br><span class="line"><span class="keyword">SELECT</span> 姓名, 年龄 <span class="keyword">FROM</span> 员工;</span><br><span class="line"></span><br><span class="line"># 列出所有男员工的姓名和薪水</span><br><span class="line"><span class="keyword">SELECT</span> 姓名, 薪水 <span class="keyword">FROM</span> 员工 <span class="keyword">WHERE</span> 性别=<span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"># 列出所有姓张的男性员工的姓名、年龄和薪水</span><br><span class="line"><span class="keyword">SELECT</span> 姓名, 年龄, 薪水 <span class="keyword">FROM</span> 员工 <span class="keyword">WHERE</span> 姓名 GLOB <span class="string">"张*"</span>;</span><br><span class="line"></span><br><span class="line"># 列出所有年龄大于 25 岁的女员工的姓名、年龄和薪水 </span><br><span class="line"><span class="keyword">SELECT</span> 姓名, 年龄, 薪水 <span class="keyword">FROM</span> 员工 <span class="keyword">WHERE</span> 性别=<span class="string">"女"</span> <span class="keyword">AND</span> 年龄 &gt; <span class="number">25</span>;</span><br></pre></td></tr></table></figure><h2 id="四、SQLite-其他杂项操作"><a href="#四、SQLite-其他杂项操作" class="headerlink" title="四、SQLite 其他杂项操作"></a>四、SQLite 其他杂项操作</h2><h3 id="1、获取数据库中所有的表"><a href="#1、获取数据库中所有的表" class="headerlink" title="1、获取数据库中所有的表"></a>1、获取数据库中所有的表</h3><p>在 SQLite 中可以使用 <code>.tables</code> 指令获取数据库所有表的名称, 也可以使用 <code>SELECT</code> 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.tables </span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> sqlite_master <span class="keyword">WHERE</span> <span class="keyword">type</span>=<span class="string">"table"</span> <span class="keyword">AND</span> <span class="keyword">name</span> != <span class="string">"sqlite_sequence"</span>;</span><br></pre></td></tr></table></figure><h3 id="2、获取数据表的-Schema-信息"><a href="#2、获取数据表的-Schema-信息" class="headerlink" title="2、获取数据表的 Schema 信息"></a>2、获取数据表的 Schema 信息</h3><p>在 SQLite 中可以使用 <code>.schema</code> 指令获取指定数据表的纲要信息，也可以使用 <code>PRAGMA</code> 语句来获取表的纲要信息，语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.schema 员工</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line"><span class="keyword">PRAGMA</span> table_info(员工);</span><br></pre></td></tr></table></figure><p>使用 <code>.schema</code> 列出表的信息是创建数据表时的 <code>CREATE</code> 语句的原始内容，比较适合人阅读，如果使用程序来解析，<code>PRAGMA</code> 则更为合适。其列出的内容是一个 6 列 N 行的数据表，每一行代表数据表中每一列的属性，其中包含列编号（cid）、列名称（name）、列数据类型（type）、不能为空（notnull）、默认值（dflt_value）、是否是主键值（pk）等。</p><p>例如，在 2.1 中创建的「员工」表列出的表信息如下：</p><table><thead><tr><th>cid</th><th>name</th><th>type</th><th>notnull</th><th>dflt_value</th><th>pk</th></tr></thead><tbody><tr><td>0</td><td>编号</td><td>INTEGER</td><td>1</td><td></td><td>1</td></tr><tr><td>1</td><td>姓名</td><td>TEXT</td><td>1</td><td></td><td>0</td></tr><tr><td>2</td><td>性别</td><td>TEXT</td><td>1</td><td></td><td>0</td></tr><tr><td>3</td><td>年龄</td><td>INTEGER</td><td>1</td><td></td><td>0</td></tr><tr><td>4</td><td>薪水</td><td>INTEGER</td><td>1</td><td>5000</td><td>0</td></tr><tr><td>5</td><td>工号</td><td>INTEGER</td><td>1</td><td></td><td>0</td></tr><tr><td>6</td><td>头像</td><td>BLOB</td><td>0</td><td></td><td>0</td></tr></tbody></table><h2 id="五、使用-Python-接口操作-SQLite"><a href="#五、使用-Python-接口操作-SQLite" class="headerlink" title="五、使用 Python 接口操作 SQLite"></a>五、使用 Python 接口操作 SQLite</h2><p>Python 可以使用 <code>sqlite3</code> 模块来操作 SQLite, 其集成了一个 DB-API 2.0 规范兼容的 SQL 接口，该模块在 Python 的标准库，可直接调来使用。其常用操作如下：</p><h3 id="1、打开-链接数据库、创建-cursor"><a href="#1、打开-链接数据库、创建-cursor" class="headerlink" title="1、打开/链接数据库、创建 cursor"></a>1、打开/链接数据库、创建 cursor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">"test.db"</span>)</span><br><span class="line">cursor = conn.cursor()</span><br></pre></td></tr></table></figure><h3 id="2、执行-SQL-语句获取执行结果"><a href="#2、执行-SQL-语句获取执行结果" class="headerlink" title="2、执行 SQL 语句获取执行结果"></a>2、执行 SQL 语句获取执行结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor.execute(<span class="string">"SELECT * FROM 员工;"</span>)</span><br><span class="line">records = cursor.fetchall()</span><br></pre></td></tr></table></figure><h3 id="3、提交数据关闭"><a href="#3、提交数据关闭" class="headerlink" title="3、提交数据关闭"></a>3、提交数据关闭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>更多的操作可以参考我的 <a href="https://github.com/amaork/PyAppFramework" target="_blank" rel="noopener">PyAppFramework</a> 仓库中 <a href="https://github.com/amaork/PyAppFramework/blob/master/core/database.py" target="_blank" rel="noopener">SQLiteDatabase 模块</a>。其提供了 SQLite 常用操作的简单封装，如：获取数据库所有表名称、获取数据表信息、获取数据表列名称、获取数据表 PRIMARY KEY、获取表的所有数据、创建表、删除表、插入数据列、更新数据列、删除数据列、刷选数据等操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、SQLite-数据类型&quot;&gt;&lt;a href=&quot;#一、SQLite-数据类型&quot; class=&quot;headerlink&quot; title=&quot;一、SQLite 数据类型&quot;&gt;&lt;/a&gt;一、SQLite 数据类型&lt;/h2&gt;&lt;p&gt;SQLite 支持 5 种数据类型，如下：&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术分享" scheme="http://amaork.me/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="SQLite、Python" scheme="http://amaork.me/tags/SQLite%E3%80%81Python/"/>
    
  </entry>
  
  <entry>
    <title>用 GIMP 制作透明图标</title>
    <link href="http://amaork.me/2018/05/11/%E7%94%A8%20GIMP%20%E5%88%B6%E4%BD%9C%E9%80%8F%E6%98%8E%E5%9B%BE%E6%A0%87/"/>
    <id>http://amaork.me/2018/05/11/用 GIMP 制作透明图标/</id>
    <published>2018-05-11T15:09:28.000Z</published>
    <updated>2018-05-25T15:12:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一个的 Qt 项目，需要放置一些图标按钮在工具栏上，让这些图标的背景变透明，然后更改工具栏的背景来实现一些效果。在网上找了一些素材用，但有些素材的背景是白色的而不是透明的，就需要有工具把白色的背景替换为透明的。使用 GMIP 制作的的过程非常简单：</p><h3 id="一、打开图标"><a href="#一、打开图标" class="headerlink" title="一、打开图标"></a>一、打开图标</h3><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-12 00.02.14.png" alt="屏幕快照 2018-05-12 00.02.14"></p><h3 id="二、添加透明图层"><a href="#二、添加透明图层" class="headerlink" title="二、添加透明图层"></a>二、添加透明图层</h3><p>在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 添加透明通道 (Add Alpha Channel) 如果透明通道已存在，可以省略该步骤。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-11 23.36.14.png" alt="屏幕快照 2018-05-11 23.36.14"></p><h3 id="三、选取背景颜色"><a href="#三、选取背景颜色" class="headerlink" title="三、选取背景颜色"></a>三、选取背景颜色</h3><p>点「吸管」工具，选中想要变透明的背景的颜色。将背景颜色的值复制下来，即下图红框中的值。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/WX20180512-000510.png" alt="WX20180512-000510"></p><h3 id="四、背景颜色到透明"><a href="#四、背景颜色到透明" class="headerlink" title="四、背景颜色到透明"></a>四、背景颜色到透明</h3><p>在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 颜色到透明 (Color to Alpha)。在弹出的对话框中，点来自（From）,然后在弹出的颜色到透明对话框中，粘贴上一步通过吸管获取的背景的颜色，点确定，然后开始转换。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/WX20180512-000548.png" alt="WX20180512-000548"></p><h3 id="五、保存透明图标"><a href="#五、保存透明图标" class="headerlink" title="五、保存透明图标"></a>五、保存透明图标</h3><p>经过以上几步操作后，蓝色背景的图标就变成了透明图标，如下图所示。最后需要将图标导出，<strong>需要注意：只有 PNG 和 GIF 格式的图片支持透明通道，推荐 PNG 格式。</strong></p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-12 00.21.09.png" alt="屏幕快照 2018-05-12 00.21.09"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做一个的 Qt 项目，需要放置一些图标按钮在工具栏上，让这些图标的背景变透明，然后更改工具栏的背景来实现一些效果。在网上找了一些素材用，但有些素材的背景是白色的而不是透明的，就需要有工具把白色的背景替换为透明的。使用 GMIP 制作的的过程非常简单：&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="杂项" scheme="http://amaork.me/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>用 GIMP 制作透明图标</title>
    <link href="http://amaork.me/2018/05/11/%E7%94%A8%20GIMP%E5%88%B6%E4%BD%9C%E9%80%8F%E6%98%8E%E5%9B%BE%E6%A0%87%20/"/>
    <id>http://amaork.me/2018/05/11/用 GIMP制作透明图标 /</id>
    <published>2018-05-11T15:09:28.000Z</published>
    <updated>2018-05-26T16:36:12.166Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一个的 Qt 项目，需要放置一些图标按钮在工具栏上，让这些图标的背景变透明，然后更改工具栏的背景来实现一些效果。在网上找了一些素材用，但有些素材的背景是白色的而不是透明的，就需要有工具把白色的背景替换为透明的。使用 GMIP 制作的的过程非常简单：</p><h3 id="一、打开图标"><a href="#一、打开图标" class="headerlink" title="一、打开图标"></a>一、打开图标</h3><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-12 00.02.14.png" alt="屏幕快照 2018-05-12 00.02.14"></p><h3 id="二、添加透明图层"><a href="#二、添加透明图层" class="headerlink" title="二、添加透明图层"></a>二、添加透明图层</h3><p>在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 添加透明通道 (Add Alpha Channel) 如果透明通道已存在，可以省略该步骤。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-11 23.36.14.png" alt="屏幕快照 2018-05-11 23.36.14"></p><h3 id="三、选取背景颜色"><a href="#三、选取背景颜色" class="headerlink" title="三、选取背景颜色"></a>三、选取背景颜色</h3><p>点「吸管」工具，选中想要变透明的背景的颜色。将背景颜色的值复制下来，即下图红框中的值。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/WX20180512-000510.png" alt="WX20180512-000510"></p><h3 id="四、背景颜色到透明"><a href="#四、背景颜色到透明" class="headerlink" title="四、背景颜色到透明"></a>四、背景颜色到透明</h3><p>在图标上右键，图层（Layer） -&gt; 透明（Transparency） -&gt; 颜色到透明 (Color to Alpha)。在弹出的对话框中，点来自（From）,然后在弹出的颜色到透明对话框中，粘贴上一步通过吸管获取的背景的颜色，点确定，然后开始转换。</p><p><img src="http://oy6j734fq.bkt.clouddn.com/WX20180512-000548.png" alt="WX20180512-000548"></p><h3 id="五、保存透明图标"><a href="#五、保存透明图标" class="headerlink" title="五、保存透明图标"></a>五、保存透明图标</h3><p>经过以上几步操作后，蓝色背景的图标就变成了透明图标，如下图所示。最后需要将图标导出，<strong>需要注意：只有 PNG 和 GIF 格式的图片支持透明通道，推荐 PNG 格式。</strong></p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2018-05-12 00.21.09.png" alt="屏幕快照 2018-05-12 00.21.09"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做一个的 Qt 项目，需要放置一些图标按钮在工具栏上，让这些图标的背景变透明，然后更改工具栏的背景来实现一些效果。在网上找了一些素材用，但有些素材的背景是白色的而不是透明的，就需要有工具把白色的背景替换为透明的。使用 GMIP 制作的的过程非常简单：&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="杂项" scheme="http://amaork.me/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 年度读书总结</title>
    <link href="http://amaork.me/2018/01/07/2017%20%E5%B9%B4%E5%BA%A6%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://amaork.me/2018/01/07/2017 年度读书总结/</id>
    <published>2018-01-07T08:39:46.000Z</published>
    <updated>2018-05-26T16:35:56.680Z</updated>
    
    <content type="html"><![CDATA[<p>2017年，我总共读了 80 本书，为 45 本书做了读书笔记。书目主要集中在投资理财、思维方式训练、小说散文以及中国古代财政政策方面。读书时间主要集中在早晚上下班地铁中，以及晚饭后到睡觉前的这段时间，周末也有读，但效率不是很高，周末在家中有太多干扰阅读的事情。这些书中只有两本是纸质书，我现在买书的原则是：有电子版就买电子版，没有电子版的时候才考虑纸质书，一方面是电子书比较方便在地铁中阅读，另外一方面是因为搬家的时候纸质书真的是太重了！！！</p><p>书目如下，书名加粗的是我比较推荐的，推荐的理由是这些书给我带来了新的技能、新的认知，能让我以不同的视角了解事情，或者是这些书读起来让我感觉轻松愉快（是的，推荐的理由就是这么简单粗暴:D）。以下分类是我按照自己的理解分类的，不是很严谨：</p><h3 id="一、投资理财"><a href="#一、投资理财" class="headerlink" title="一、投资理财"></a>一、投资理财</h3><ul><li>不炒股只投基，低风险赚出高收益</li><li>傻瓜式投资</li><li>治富</li><li>财务是个真实的谎言</li><li><strong>小狗钱钱</strong></li><li>指数基金投资指南（雪球）</li><li><strong>指数基金投资指南</strong></li><li>解读基金：我的投资观与实践</li><li>业余投资者的十条军规</li><li>银行行长不轻易说的理财经</li><li><strong>富爸爸，穷爸爸</strong>（重读）</li><li>富爸爸，点石成金</li><li>富爸爸，21世纪的生意</li><li>富爸爸，商学院</li><li><strong>邓普顿教你逆向投资</strong></li></ul><h3 id="二、思维方式"><a href="#二、思维方式" class="headerlink" title="二、思维方式"></a>二、思维方式</h3><ul><li>拆掉思维里的墙</li><li>认知盈余</li><li><strong>巴菲特之道</strong></li><li><strong>随机漫步的傻瓜</strong></li><li><strong>清醒思考的艺术</strong></li><li>明智行动的艺术</li><li>巴菲特传</li><li><strong>细节</strong></li><li><strong>超越智商：为什么聪明人也会做蠢事</strong></li><li>暗时间</li><li><strong>黑匣子思维</strong></li><li><strong>稀缺</strong></li><li><strong>先发影响力</strong>(影响力作者的第二部作品，影响力也很棒)</li><li><strong>穷查理宝典</strong></li></ul><h3 id="三、小说散文"><a href="#三、小说散文" class="headerlink" title="三、小说散文"></a>三、小说散文</h3><ul><li>鱼王</li><li>阴兽</li><li>人间椅子</li><li>风起陇西</li><li><strong>平民之宴</strong></li><li>哈利波特</li><li><strong>美国众神</strong></li><li><strong>冰与火之歌</strong>（15 年买的书 17 年看完，惭愧）</li><li><strong>碟形世界：猫和少年魔笛手</strong></li><li>这些人，那些事</li><li>有时</li><li><strong>阿勒泰的角落</strong></li><li>走夜路请放声唱歌</li><li><strong>1984</strong></li><li>三毛流浪记</li></ul><h3 id="四、其他分类"><a href="#四、其他分类" class="headerlink" title="四、其他分类"></a>四、其他分类</h3><ul><li>哈佛评论：乔布斯的管理课程</li><li>你为什么是穷人</li><li><strong>哲学家们都干了些什么</strong></li><li>未来世界的幸存者（阮一峰博客）</li><li>如何科学地学英语</li><li>谈美</li><li>谈修养</li><li>人类砍头小史</li><li>大空头</li><li>创业就是要细分垄断</li><li>90秒抵达安全</li><li>跟任何人都聊得来</li><li>小顾聊神话</li><li>史家高华</li><li>那些古怪又让人忧心的问题</li><li>电影品格</li><li>我是评香师</li><li>认同感：用故事包装事实的艺术</li><li>一小时外</li><li>中国人的气质</li><li><strong>民主的细节</strong></li><li><strong>观念的水位</strong></li><li>马伯庸笑翻中国史</li><li>只有偏执狂才能生存</li><li>极简主义</li><li>睡眠革命</li><li><strong>巨富</strong></li><li>枪炮、病菌与钢铁</li><li>品牌洗脑</li><li>身份的焦虑</li><li>极简人类史</li><li>说中国</li><li><strong>血酬定律</strong></li><li><strong>大国大城</strong></li><li><strong>中央帝国的财政密码</strong></li><li><strong>历代中国经济变革得失</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017年，我总共读了 80 本书，为 45 本书做了读书笔记。书目主要集中在投资理财、思维方式训练、小说散文以及中国古代财政政策方面。读书时间主要集中在早晚上下班地铁中，以及晚饭后到睡觉前的这段时间，周末也有读，但效率不是很高，周末在家中有太多干扰阅读的事情。这些书中只有
      
    
    </summary>
    
      <category term="随笔、总结" scheme="http://amaork.me/categories/%E9%9A%8F%E7%AC%94%E3%80%81%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS Workflow 初体验</title>
    <link href="http://amaork.me/2017/11/05/iOS-Workflow-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://amaork.me/2017/11/05/iOS-Workflow-初体验/</id>
    <published>2017-11-05T08:09:02.000Z</published>
    <updated>2018-05-26T09:20:20.691Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Workflow-介绍"><a href="#Workflow-介绍" class="headerlink" title="Workflow 介绍"></a>Workflow 介绍</h3><p>前阵子某电商 iPhone 8 大降价，就趁机入手了一个，用了 3 年的 5S 终于退役了。之前用的是 iOS 8,升级到 iOS 11 之后感觉变化还是很大的。让我觉得比较新颖的是 <a href="https://itunes.apple.com/app/workflow-powerful-automation/id915249334" target="_blank" rel="noopener">Workflow</a> 这个应用（虽然这个应用早就出来了，之前从来没有用过），其主要功能是将一系列操作整合到一起，然后一键自动执行，用来提高效率，比如一键分享图片到各个社交平台。</p><p>当然，它有各种各样的用法，就看你的需求和想象力了。其内置了一系列操作称之为 「Action」。你可以根据你的需要，把各种「Action」组合起来，形成一个「Workflow」，然后一键执行。看了几个例子和帮助文档之后，我决定自己做一个试试。</p><h3 id="Air-Quality-Index-制作思路"><a href="#Air-Quality-Index-制作思路" class="headerlink" title="Air Quality Index 制作思路"></a>Air Quality Index 制作思路</h3><p>在 macOS 有个很著名的应用 「Alfred」,其内部也支持 Workflow，其中有一个查询空气质量的 Workflow, 我决定先仿照这个来一个。其大概工作流程是：</p><div id="flowchart-0" class="flow-chart"></div><p>首先需要去 <a href="http://www.pm25.in/api_doc" target="_blank" rel="noopener">PM25.IN</a> 了解一下查询控制质量 API 的使用，要想查询空气质量，需要一个 PM25.IN 的 AppKey。为了简便起见，就没有申请新的 AppKey，使用其公共测试 AppKey，以后正常使用的时候，最好单独申请一个属于自己的 AppKey。</p><p>得到 AppKey 之后，通过<code>http://www.pm25.in/api/querys/pm2_5.json</code>这个接口去获取空气质量数据，调用方法，参照其文档：</p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2017-11-05 17.32.48.png" alt="屏幕快照 2017-11-05 17.32.48"></p><p>我们至少需要传递一个参数，即城市的名称，然后这个 API 回返回一个数组，数组中的每个项都是一个字典，代表这个城市一个检测点的数据，我们关心的数据有，监测点名称（position_name）、空气质量（quality）、空气质量指数（aqi）、PM2.5 颗粒小时平均值（pm2_5）等参数。</p><p>了解了这些之后就可以动手做了，从一个程序员的角度来看「Workflow」类似一种图形化的编程工具，其提供了<code>Scripting</code>类似一种图形化的编程语言。通过它你可以给变量赋值、获取变量值、流控制、循环控制、处理列表，字典等数据等。其他的功能类似于其他编程语言中的库，你可以通过这些库，获得设备的信息、或者对图像进行处理、发起 HTTP 请求等等，最终通过「Alert」、「Notification」、「Vibrate」、「Play Sound」、「Speak Text」等表现方式 ,将处理后的结果输出。</p><p><strong>需要注意的是，每个「Action」都有一个输入和输出，上一个「Action」的输出，默认会成为下一个「Action」的输入，在有些地方需要将数据保存到变量中，以免被覆盖，在后面使用的时候，再取出来。更详细的文档说明参考 <a href="https://workflow.is/docs" target="_blank" rel="noopener">Workflow Documentation</a>.</strong></p><h3 id="Air-Quality-Index-使用说明"><a href="#Air-Quality-Index-使用说明" class="headerlink" title="Air Quality Index 使用说明"></a>Air Quality Index 使用说明</h3><p>可以从 <a href="https://workflow.is/workflows/5b9d983524ca4c7587ad110ff9b7a5ec" target="_blank" rel="noopener">Air Quality Index</a>  下载我做的查询空气质量 Workflow，在使用的时候，替换你在 <a href="http://www.pm25.in/api_doc" target="_blank" rel="noopener">PM25.IN</a> 中申请的 AppKey, 替换位置如下截图中的<code>Text</code>中的值（默认使用的是 PM25.in 公共测试 AppKey）</p><p><img src="http://oy6j734fq.bkt.clouddn.com/aqi_appkey.jpeg" alt="aqi_appkey"></p><p>然后，根据自己的使用情况，将经常查询的城市，加入到如下截图所示的<code>List</code>中，这样就可以快速查询这个城市的空气质量情况</p><p><img src="http://oy6j734fq.bkt.clouddn.com/aqi_input.jpeg" alt="aqi_input"></p><p>最终运行效果如下：</p><p><img src="http://oy6j734fq.bkt.clouddn.com/air_quality_index_workflow.gif" alt="air_quality_index_workflow"></p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始e=>end: 结束op_input=>operation: 获取城市名称op_get_aqi=>operation: 向「PM25.in」查询空气质量数据op_data_proc=>operation: 对返回数据解析处理，进行格式化op_show_data=>operation: 展示查询城市的空气质量st->op_input->op_get_aqi->op_data_proc->op_show_data->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Workflow-介绍&quot;&gt;&lt;a href=&quot;#Workflow-介绍&quot; class=&quot;headerlink&quot; title=&quot;Workflow 介绍&quot;&gt;&lt;/a&gt;Workflow 介绍&lt;/h3&gt;&lt;p&gt;前阵子某电商 iPhone 8 大降价，就趁机入手了一个，用了 3 
      
    
    </summary>
    
      <category term="技术分享" scheme="http://amaork.me/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="iOS Workflow" scheme="http://amaork.me/tags/iOS-Workflow/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 绑定二级域名</title>
    <link href="http://amaork.me/2017/10/28/Hexo-%E7%BB%91%E5%AE%9A%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
    <id>http://amaork.me/2017/10/28/Hexo-绑定二级域名/</id>
    <published>2017-10-28T13:25:09.000Z</published>
    <updated>2018-05-26T09:20:20.689Z</updated>
    
    <content type="html"><![CDATA[<p>上周末把 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 摸索了一遍，部署在了 Github Pages 上，详细过程就不多说了，网上有很多教程。今天要讲讲，如何绑定二级域名。</p><ol><li>首先你需要有一个域名，可以到<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>或国外的<a href="https://sg.godaddy.com/zh/" target="_blank" rel="noopener">Godaddy</a>购买</li><li>在域名供应商提供的域名解析服务中添加一条 <code>CNAME</code> 记录，指向你博客的 Github Pages 地址例如<code>blog.yourdomain.xxx -&gt; yourname.github.io</code></li><li>在博客目录的 <code>source</code> 目录中添加一个名称为 <code>CNAME</code> 的文件，文件中存放你第二部 <code>CNAME</code> 中添加的域名例如：<code>blog.yourdomain.xxx</code></li><li>打开 Github 存放你博客仓库的设置菜单，找到 Custom domain, 填入你的博客地址，保存</li><li>重新部署到 Github Pages</li></ol><p>经过以上几步，这样当你通过二级域名 <code>blog.yourdomain.xxx</code> 访问博客的时候，经过域名服务器的映射就自动跳转到了 Github Pages 地址。<strong>注意：域名记录的生效需要花费时间，通常不会超过 72 小时</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上周末把 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 摸索了一遍，部署在了 Github Pages 上，详细过程就不多说了，网上有很多教程。今天要讲讲，如何绑定二级域名。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://amaork.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的读书笔记变迁史</title>
    <link href="http://amaork.me/2017/10/28/%E6%88%91%E7%9A%84%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%8F%98%E8%BF%81%E5%8F%B2/"/>
    <id>http://amaork.me/2017/10/28/我的读书笔记变迁史/</id>
    <published>2017-10-28T06:19:54.000Z</published>
    <updated>2018-05-26T09:20:20.695Z</updated>
    
    <content type="html"><![CDATA[<p>我读书素来有整理笔记的习惯，总觉得读了一本书之后，不把书中的思想要点和自己的理解，以笔记的形式记录下来，就会很快忘掉。整理读书笔记是个很繁琐的事情，当然，整理读书笔记还是有很多好处的。比如说可以方便地进行定期回顾，加深自己的理解、日后查找资料的时候可以快速检索、可以把当时自己的想法记录下来供日后参考，另外还有增强自己成就感的好处，看着自己整理下来一篇篇的读书笔记，还是很有成就感的。</p><p>在使用 Kindle 之前，我所有的读书笔记都是在<a href="https://book.douban.com/" target="_blank" rel="noopener">豆瓣读书</a>中整理的，那还是 iPhone 4S 时代，豆瓣推出了一个「豆瓣笔记」的手机应用 （不是现在的「豆瓣阅读」）, 可以在那个应用中整理笔记。只需要填写章节的名称、页码，可以摘抄书中的内容，然后在后面附上自己的读书心得，也可以加照片作为附件，刚好满足了我的需求。然后就一直用了下来，我在「豆瓣笔记」中整理了 19 本书 227 条笔记。可惜好景不长，在豆瓣推出自己的电子书业务「豆瓣阅读」后，就把「豆瓣笔记」这条线给砍了，软件不再更新，后来我换手机之后，就没有继续在那「豆瓣笔记」中整理笔记了。</p><p>这中间还有一段小插曲，任何东西刚推出，需要拓展客户的时候都是很给力的，「豆瓣阅读」也不例外，我记得当时充值很优惠，好像是充 50 当 100 用，记不清楚了。「豆瓣阅读」刚推出的时候，亚马逊的 Kindle 系列电子书还没有正式进入中国，可以在淘宝上买国外的用，不过只能自己复制书进去看，不能在线购买。我尝试「豆瓣阅读」另外一个原因是，它可以把你买的电子书转换成适合 Kindle 6 寸屏的 PDF，然后通过邮件推送给你。不过这个服务也很快就停止运营了，原因是 Kindle 正式在国内上线了。对于喜欢阅读的我，当然是毫不犹豫的来了一个，这就是 Kindle Paperwhite 一代，自此上了亚马逊的船至今。</p><p>经历了「豆瓣笔记」停止更新事件之后，我又尝试了其他的一些服务，比如在 Evernote、OneNote 上整理笔记，不过都不太理想。这些平台虽然可以同步，但都不支持 Markdown 语法，而且内容放在别人平台上很不放心，谁知道将来这些平台什么时候停止运营呢，即便在停止运营前可以把你的内容导出，但自己还要二次处理，还是很麻烦的。</p><p>「豆瓣笔记」停止更新后，我就把自己的读书笔记导出来了，导出为 XML 格式。后来自己用 <a href="http://www.grinninglizard.com/tinyxml2/" target="_blank" rel="noopener">TinyXML2</a> 写了一个 C++ 命令行小程序 <a href="https://github.com/amaork/doubanNote2Markdown" target="_blank" rel="noopener">doubanNote2Markdown</a> 把「豆瓣读书」的导出的 xml 文件转换成 Markdown 格式。说实话写的很粗糙，那会儿还没有用 Python 呢，要不用 Python 干这事儿简直太轻松，说不定还能上界面呢。总之，它圆满地完成了任务，我也就没再管它了。转换后的效果如下：</p><p><img src="http://oy6j734fq.bkt.clouddn.com/屏幕快照 2017-10-28 16.59.39.png" alt="屏幕快照 2017-10-28 16.59.39"></p><p>几经折腾，我发现整理笔记最合适的方式是，将笔记整理成使用 Markdown 语法的文本文件，然后通过某种服务，同步管理这些文件。首先想到的是各种网盘，可惜最好用的 Dropbox 在国内早就不能用了。国内的几家网盘提供商，说实话我不太信任，自己的东西可能随时被删掉。所以个人觉得最稳妥的方法是使用 Git 来管理。如果读书笔记的内容不是私密的，可以在 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 中新建一个仓库来管理，如果是私密的，可以存放在自己私有的 Git 服务器上。我目前就是这样做的，当然不是为了存放读书笔记专门建立的 Git 服务器，而是兼用。</p><p>这样做优点就不用说了，说说缺点吧，缺点就是在移动设备上查看的时候，不是很方便。我目前的解决方案是，定期把这些读书笔记整理成 PDF 这样就可以在各种设备上查看了。现在有各种各样的 Markdown 编辑器，可以把 Markdown 转换为 PDF 或 HTML 甚至可以生成静态网站，我目前用的是 <a href="http://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a>，感觉不错，而且支持<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛</a>做图床 (MWeb 看到了，请给我打广告费(^_^))</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我读书素来有整理笔记的习惯，总觉得读了一本书之后，不把书中的思想要点和自己的理解，以笔记的形式记录下来，就会很快忘掉。整理读书笔记是个很繁琐的事情，当然，整理读书笔记还是有很多好处的。比如说可以方便地进行定期回顾，加深自己的理解、日后查找资料的时候可以快速检索、可以把当时自
      
    
    </summary>
    
      <category term="随笔" scheme="http://amaork.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>博客正式上线</title>
    <link href="http://amaork.me/2017/10/21/%E5%8D%9A%E5%AE%A2%E6%AD%A3%E5%BC%8F%E4%B8%8A%E7%BA%BF/"/>
    <id>http://amaork.me/2017/10/21/博客正式上线/</id>
    <published>2017-10-21T13:58:11.000Z</published>
    <updated>2018-05-26T09:20:20.694Z</updated>
    
    <content type="html"><![CDATA[<p>早在去年就有了写博客的想法，一方面，想把自己碎碎念的想法，和日常工作中遇到的问题和解决思路整理起来，好方便日后回顾。另外一方面，想借助互联网这个开放的平台，扩大自己的影响力，同时多结识志同道合的朋友。</p><p>去年的时候研究了一阵子 <a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> + <a href="http://getbootstrap.com/" target="_blank" rel="noopener">Bootstrap</a> + VPS 的方案，还做了几个 <a href="https://github.com/amaork/DjangoStudio" target="_blank" rel="noopener">Deom</a>。感觉用 <code>Django</code> 做个人博客有点儿大材小用，而且很多东西需要自己捣鼓，特别是 Markdown 渲染这块儿是比较头疼的，再后来因为有其他事情耽搁，就放下。</p><p>直到今年接触到了 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 这个平台，发现用它做个人博客真的是太合适不过了，就像它宣称的那样小巧、快捷、支持 Markdown 而且可以部署在 <code>Github</code> 上。于是，今天下午就花了一下午的时间把这个捣鼓上了。我是大学毕业后半路出家，搞嵌入式软件开发的，对前端这块，实在是一窍不通。好在有许多人把自己 <code>Hexo</code> 使用的主题分享出来了，要特别感谢 <a href="http://chaoo.oschina.io/" target="_blank" rel="noopener">@郑超</a> 我现在用的这个<a href="https://github.com/chaooo/hexo-theme-BlueLake" target="_blank" rel="noopener">主题</a>就是他做的。</p><p>总言之，我的博客上线啦，后续我会把这几年在工作中遇到的问题，和解决的思路整理出来，希望能帮助到别人，同时也可以加深自己的记忆和理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早在去年就有了写博客的想法，一方面，想把自己碎碎念的想法，和日常工作中遇到的问题和解决思路整理起来，好方便日后回顾。另外一方面，想借助互联网这个开放的平台，扩大自己的影响力，同时多结识志同道合的朋友。&lt;/p&gt;
&lt;p&gt;去年的时候研究了一阵子 &lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="随笔" scheme="http://amaork.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://amaork.me/2017/10/21/Test/"/>
    <id>http://amaork.me/2017/10/21/Test/</id>
    <published>2017-10-21T10:46:45.000Z</published>
    <updated>2018-05-26T09:20:20.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This-is-a-test-page"><a href="#This-is-a-test-page" class="headerlink" title="This is a test page"></a>This is a test page</h1><h4 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h4><blockquote><p>Life never gets easier, yor just get better.</p></blockquote><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><table><thead><tr><th>Header1</th><th>Header2</th></tr></thead><tbody><tr><td>cell1</td><td>cell2</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;This-is-a-test-page&quot;&gt;&lt;a href=&quot;#This-is-a-test-page&quot; class=&quot;headerlink&quot; title=&quot;This is a test page&quot;&gt;&lt;/a&gt;This is a test page&lt;/h1&gt;&lt;h4 i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://amaork.me/2017/10/21/hello-world/"/>
    <id>http://amaork.me/2017/10/21/hello-world/</id>
    <published>2017-10-21T10:36:45.000Z</published>
    <updated>2018-05-26T09:20:20.690Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
